namespace Examples;

using Ternary3;

public partial class GeneratorDemo
{
    private const int SimpleValue = ter111; // 13
    public static void Run()
    {
        Console.WriteLine($"\r\n\r\n{nameof(GeneratorDemo)}");
        // This demo shows how constants are generated by the Ternary3 code generator.
        // When the GenerateTernaryConstantsAttribute is applied,
        // ternary literals "terXXXX" can be used.
        // The GenerateTernaryConstantsAttribute can also be applied at the assembly level.

        Console.WriteLine($"The value of ter111 is {SimpleValue}, and the value of terT01 is {terT01}");
        Int3T sum = ter001 + ter001;
        Console.WriteLine($"{nameof(ter001)} + {nameof(ter001)} = {sum} ({sum:ter})");
        Int9T int9Value = terTTT000110;
        Console.Write($"The value of {nameof(terTTT000111)} is {int9Value} ({int9Value:ter})\r\n");
        TernaryArray27 ternaryArrayValue = ter111111111_000000000_TTTTTTTTT;
        Console.WriteLine($"The value of {nameof(ter111111111_000000000_TTTTTTTTT)} is {ternaryArrayValue} ({ternaryArrayValue:ter})");
    }
}