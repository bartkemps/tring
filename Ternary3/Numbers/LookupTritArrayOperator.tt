<#@ template debug="false" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#
    // Define the trit array sizes to generate operators for
    var tritArraySizes = new List<(int Trits, string BackingType)>
    {
        (3, "Byte"),
        (9, "UInt16"), 
        (27, "UInt32")
    };

    // Loop through each size and generate its file
    foreach (var (size, type) in tritArraySizes)
    {
        // Generate the file content
        var fileContent = GenerateLookupTritArrayOperator(size, type);

        // Determine the output file path
        var outputFilePath = Host.ResolvePath($"LookupTritArray{size}Operator.cs");

        // Write the content to the file
        File.WriteAllText(outputFilePath, fileContent);
    }
#>
LastGenerated = <#= DateTime.Now.ToString() #>

<#+
// This method generates the code for a LookupTritArrayOperator class
private string GenerateLookupTritArrayOperator(int tritArraySize, string type)
{
    return $$"""
           // <auto-generated />
           namespace Ternary3.Numbers;
           
           using Operators.Operations;
           
           public readonly struct LookupTritArray{{tritArraySize}}Operator
           {
               private readonly TritArray{{tritArraySize}} trits;
               private readonly BinaryOperationBuilder<{{type}}> builder;
           
               internal LookupTritArray{{tritArraySize}}Operator(TritArray{{tritArraySize}} trits, TritLookupTable table)
               {
                   this.trits = trits;
                   this.builder = new(table);
               }
           
               internal LookupTritArray{{tritArraySize}}Operator(TritArray{{tritArraySize}} trits, Trit[,] table)
                   : this(trits, new TritLookupTable(table))
               {
               }
           
               internal LookupTritArray{{tritArraySize}}Operator(TritArray{{tritArraySize}} trits, ReadOnlySpan<Trit> table)
                   : this(trits, new TritLookupTable(table))
               {
               }
           
               internal LookupTritArray{{tritArraySize}}Operator(TritArray{{tritArraySize}} trits, Func<Trit, Trit, Trit> operation)
                   : this(trits, new TritLookupTable(operation))
               {
               }
           
               public static TritArray{{tritArraySize}} operator |(LookupTritArray{{tritArraySize}}Operator left, TritArray{{tritArraySize}} right)
               {
                   left.builder.Build()(left.trits.Negative, left.trits.Positive, right.Negative, right.Positive, out var negative, out var positive);
                   return new() { Negative = negative, Positive = positive };
               }
           }
           """;
}
#>
