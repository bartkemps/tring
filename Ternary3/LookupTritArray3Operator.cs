// <auto-generated />
namespace Ternary3;

using Operators;
using Operators.Operations;
using TritArrays;

/// <summary>
/// Represents an operator that combines a TernaryArray3 with a binary operation lookup table.
/// </summary>
/// <remarks>
/// Used to efficiently apply binary operations between TernaryArray3 instances by using optimized lookup tables.
/// The first operand is stored within the operator structure, and the second operand is provided via the pipe operator.
/// </remarks>
public readonly struct LookupTritArray3Operator
{
    private readonly TernaryArray3 ternaries;
    private readonly BinaryTritOperator table;

    internal LookupTritArray3Operator(TernaryArray3 ternaries, BinaryTritOperator table)
    {
        this.ternaries = ternaries;
        this.table = table;
    }

    internal LookupTritArray3Operator(TernaryArray3 ternaries, Trit[,] table)
        : this(ternaries, new BinaryTritOperator(table))
    {
    }

    internal LookupTritArray3Operator(TernaryArray3 ternaries, ReadOnlySpan<Trit> table)
        : this(ternaries, new BinaryTritOperator(table))
    {
    }

    internal LookupTritArray3Operator(TernaryArray3 ternaries, Func<Trit, Trit, Trit> operation)
        : this(ternaries, new BinaryTritOperator(operation))
    {
    }

    /// <summary>
    /// Performs a binary operation between the stored left operand (TernaryArray3) and the right operand using a lookup table.
    /// </summary>
    /// <param name="left">The LookupTritArray3Operator containing the left operand and operation details.</param>
    /// <param name="right">The right TernaryArray3 operand.</param>
    /// <returns>A new TernaryArray3 representing the result of applying the binary operation to each corresponding pair of ternaries.</returns>
    public static TernaryArray3 operator |(LookupTritArray3Operator left, TernaryArray3 right)
    {
        left.table.Apply(left.ternaries.Negative, left.ternaries.Positive, right.Negative, right.Positive, out var negative, out var positive);
        return new(negative, positive);
    }
    
    /// <summary>
    /// Performs a binary operation between the stored left operand (TernaryArray3) and an Int3T right operand using a lookup table.
    /// </summary>
    /// <param name="left">The LookupTritArray3Operator containing the left operand and operation details.</param>
    /// <param name="right">The right Int3T operand, which will be converted to a TernaryArray3.</param>
    /// <returns>A new TernaryArray3 representing the result of applying the binary operation to each corresponding pair of ternaries.</returns>
    public static TernaryArray3 operator |(LookupTritArray3Operator left, Int3T right)
    {
        var tritArray = (TernaryArray3)right;
        left.table.Apply(left.ternaries.Negative, left.ternaries.Positive, tritArray.Negative, tritArray.Positive, out var negative, out var positive);
        return new(negative, positive);
    }
       
    /// <summary>
    /// Performs a binary operation between the stored left operand (TernaryArray3) and a SByte right operand using a lookup table.
    /// </summary>
    /// <param name="left">The LookupTritArray3Operator containing the left operand and operation details.</param>
    /// <param name="right">The right SByte operand, which will be converted to a TernaryArray3.</param>
    /// <returns>A new TernaryArray3 representing the result of applying the binary operation to each corresponding pair of ternaries.</returns>
    public static TernaryArray3 operator |(LookupTritArray3Operator left, SByte right)
    {
        TritConverter.To32Trits(right, out var rightNegative, out var rightPositive);
        left.table.Apply(left.ternaries.Negative, left.ternaries.Positive, (Byte)rightNegative, (Byte)rightPositive, out var negative, out var positive);
        return new(negative, positive);
    }
}