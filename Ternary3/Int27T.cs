// <auto-generated />
#nullable enable
namespace Ternary3;

using Integers;
using Formatting;
using Operators;
using Operators.Operations;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Globalization;
using System.Numerics;
using System.Diagnostics.CodeAnalysis;

/// <summary>
/// Represents a 27-trit  signed integer, modeled after the <see cref="Int64"/> type.
/// </summary>
[GeneratedCode("IntT.tt", "1.0.0.0")]
[DebuggerDisplay("{DebugView()}")]
public readonly partial struct Int27T : ITernaryInteger<Int27T>
{
    private readonly Int64 value;

    /// <summary>
    ///  Represents the maximum value of a <see cref="Int27T"/>, expressed as a <see cref="Int64"/> This field is constant.
    /// </summary>
    public const Int64 MaxValueConstant = 3812798742493;

    /// <summary>
    /// Represents the minimum value of a <see cref="Int27T"/>, expressed as a <see cref="Int64"/> This field is constant.
    /// </summary>
    public const Int64 MinValueConstant = -3812798742493;

    /// <summary>
    /// Represents the largest possible value of a <see cref="Int27T"/>. This field is static readonly.
    /// </summary>
    public static readonly Int27T MaxValue = new(MaxValueConstant);

    /// <summary>
    /// Represents the smallest possible value of a <see cref="Int27T"/>. This field is static readonly.
    /// </summary>
    /// <example>
    /// <code>
    /// // This code outputs TTTTTTTTTTTTTTTTTTTTTTTTTT1.
    /// Int27T value = Int27T.MinValue + 2;
    /// console.WriteLine($"The value is: {value:ter}");
    /// </code>
    /// </example>
    public static readonly Int27T MinValue = new(MinValueConstant);

    private Int27T(Int64 value) => this.value = value;
    
     private static Int27T Create(Int32 value) => new(value);
     private static Int27T Create(Int64 value) => new(value.BalancedModulo(MaxValueConstant));
     private static Int27T Create(Int128 value) => new(value.BalancedModulo(MaxValueConstant));

     /// <summary>
/// Defines an implicit conversion of a Int64 to a <see cref="Int27T"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int27T"/> that represents the converted value.</returns>
public static implicit operator Int27T(Int64 value) => Create(value);
     /// <summary>
/// Defines an implicit conversion of a Int27T to a <see cref="Int64"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int64"/> that represents the converted value.</returns>
public static implicit operator Int64(Int27T value) => (Int64)value.value;
     /// <summary>
/// Defines an implicit conversion of a Int32 to a <see cref="Int27T"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int27T"/> that represents the converted value.</returns>
public static implicit operator Int27T(Int32 value) => Create(value);
     /// <summary>
/// Defines an explicit conversion of a Int27T to a <see cref="Int32"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int32"/> that represents the converted value.</returns>
public static explicit operator Int32(Int27T value) => (Int32)value.value;
     /// <summary>
/// Defines an explicit conversion of a Int128 to a <see cref="Int27T"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int27T"/> that represents the converted value.</returns>
public static explicit operator Int27T(Int128 value) => Create(value);
     /// <summary>
/// Defines an implicit conversion of a Int27T to a <see cref="Int128"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int128"/> that represents the converted value.</returns>
public static implicit operator Int128(Int27T value) => (Int128)value.value;

    /// <summary>
    /// Returns a value indicating whether this instance is equal to a specified object.
    /// </summary>
    /// <param name="obj">An object to compare with this instance.</param>
    /// <returns>
    /// <see langword="true"/> if <paramref name="obj"/> is an instance of <see cref="Int27T"/> or a compatible numeric type
    /// and equals the value of this instance; otherwise, <see langword="false"/>.
    /// </returns>
    public override bool Equals(object? obj)
    {
        switch (obj)
        {
            case null: return false;
            case Int27T other: return value == other.value;
            case int typed: return value == typed;
            case long int64: return value == int64;
            case short int16: return value == int16;
            case byte byteVal: return value == byteVal;
            case sbyte sbyteVal: return value == sbyteVal;
            case uint uint32: return value == uint32;
            case ulong uint64: return value == (Int64)uint64;
            case ushort uint16: return value == uint16;
            case float singleValue: return singleValue.Equals(value);
            case double doubleValue: return doubleValue.Equals(value);
            case decimal decimalValue: return decimalValue.Equals(value);
            case char charVal: return value == charVal;
            case IConvertible conv:
                try
                {
                    // ReSharper disable once SwitchStatementHandlesSomeKnownEnumValuesWithDefault
                    switch (conv.GetTypeCode())
                    {
                        case TypeCode.Int16: return value == conv.ToInt16(null);
                        case TypeCode.UInt16: return value == conv.ToUInt16(null);
                        case TypeCode.Int32: return value == conv.ToInt32(null);
                        case TypeCode.UInt32: return value == conv.ToUInt32(null);
                        case TypeCode.Int64: return value == conv.ToInt64(null);
                        case TypeCode.UInt64: return value == (Int64)conv.ToUInt64(null);
                        case TypeCode.Byte: return value == conv.ToByte(null);
                        case TypeCode.SByte: return value == conv.ToSByte(null);
                        case TypeCode.Single: return conv.ToSingle(null).Equals(value);
                        case TypeCode.Double: return conv.ToDouble(null).Equals(value);
                        case TypeCode.Decimal: return conv.ToDecimal(null).Equals(value);
                    }
                }
                catch
                {
                    return false;
                }

                break;
        }

        return obj.Equals(value);
    }

    /// <summary>
    /// Returns a value indicating whether this instance is equal to a specified <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="other">A <see cref="Int27T"/> value to compare to this instance.</param>
    /// <returns><see langword="true"/> if <paramref name="other"/> has the same value as this instance; otherwise, <see langword="false"/>.</returns>
    public bool Equals(Int27T other) => value == other.value;

    /// <summary>
    /// Returns a value indicating whether this instance is equal to a specified <see cref="Int64"/> value.
    /// </summary>
    /// <param name="other">A <see cref="Int64"/> value to compare to this instance.</param>
    /// <returns><see langword="true"/> if <paramref name="other"/> has the same value as this instance; otherwise, <see langword="false"/>.</returns>
    public bool Equals(Int64 other) => value == other;

    /// <summary>
    /// Returns the hash code for this instance.
    /// </summary>
    /// <returns>A 32-bit signed integer hash code.</returns>
    public override int GetHashCode() => value.GetHashCode();

    #region Equality Operators

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int27T"/> instances are equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator ==(IConvertible left, Int27T right) => right.Equals(left);

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int27T"/> instances are not equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator !=(IConvertible left, Int27T right) => !right.Equals(left);

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int27T"/> instances are equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator ==(Int27T left, IConvertible right) => left.Equals(right);

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int27T"/> instances are not equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator !=(Int27T left, IConvertible right) => !left.Equals(right);

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int27T"/> instances are equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator ==(Int27T left, Int27T right) => left.value == right.value;

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int27T"/> instances are not equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator !=(Int27T left, Int27T right) => left.value != right.value;

    #endregion

    #region Arithmetic Operators
    
    // Ternary arithmetic operators
    /// <summary>
    /// Adds two ternary numbers together, maintaining the original numeric type.
    /// </summary>
    /// <param name="left">The first ternary number.</param>
    /// <param name="right">The second ternary number.</param>
    /// <returns>A new ternary number of the same type containing the sum.</returns>
    public static Int27T operator +(Int27T left, Int27T right) => Create((Int128)left.value + right.value);

    /// <summary>
    /// Subtracts the second ternary number from the first, maintaining the original numeric type.
    /// </summary>
    /// <param name="left">The number to subtract from.</param>
    /// <param name="right">The number to subtract.</param>
    /// <returns>A new ternary number of the same type containing the difference.</returns>
    public static Int27T operator -(Int27T left, Int27T right) => Create((Int128)left.value - right.value);

    /// <summary>
    /// Multiplies two ternary numbers together, maintaining the original numeric type.
    /// </summary>
    /// <param name="left">The first number to multiply.</param>
    /// <param name="right">The second number to multiply.</param>
    /// <returns>A new ternary number of the same type containing the product.</returns>
    public static Int27T operator *(Int27T left, Int27T right) => Create((Int128)left.value * right.value);

    /// <summary>
    /// Divides the first ternary number by the second, maintaining the original numeric type.
    /// </summary>
    /// <param name="left">The dividend.</param>
    /// <param name="right">The divisor.</param>
    /// <returns>A new ternary number of the same type containing the quotient.</returns>
    public static Int27T operator /(Int27T left, Int27T right) => Create(left.value / right.value);

    /// <summary>
    /// Computes the remainder after dividing the first ternary number by the second.
    /// </summary>
    /// <param name="left">The dividend.</param>
    /// <param name="right">The divisor.</param>
    /// <returns>A new ternary number of the same type containing the remainder.</returns>
    public static Int27T operator %(Int27T left, Int27T right) => Create(left.value % right.value);

    // Unary arithmetic operators
    /// <summary>
    /// Returns the negation of a ternary number, maintaining the original numeric type.
    /// </summary>
    /// <param name="value">The ternary number to negate.</param>
    /// <returns>A new ternary number of the same type containing the negated value.</returns>
    public static Int27T operator -(Int27T value) => Create(-value.value);

    /// <summary>
    /// Returns the same ternary number (unary plus operator).
    /// </summary>
    /// <param name="value">The ternary number.</param>
    /// <returns>The same ternary number.</returns>
    public static Int27T operator +(Int27T value) => value;

    // Mixed arithmetic operators
    /// <summary>
    /// Adds a ternary number and a native numeric value, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The ternary number.</param>
    /// <param name="right">The native numeric value to add.</param>
    /// <returns>A new ternary number containing the sum.</returns>
    public static Int27T operator +(Int27T left, Int64 right) => Create((Int128)left.value + right);

    /// <summary>
    /// Adds a native numeric value and a ternary number, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The native numeric value to add.</param>
    /// <param name="right">The ternary number.</param>
    /// <returns>A new ternary number containing the sum.</returns>
    public static Int27T operator +(Int64 left, Int27T right) => Create((Int128)left + right.value);

    /// <summary>
    /// Subtracts a native numeric value from a ternary number, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The ternary number to subtract from.</param>
    /// <param name="right">The native numeric value to subtract.</param>
    /// <returns>A new ternary number containing the difference.</returns>
    public static Int27T operator -(Int27T left, Int64 right) => Create((Int128)left.value - right);

    /// <summary>
    /// Subtracts a ternary number from a native numeric value, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The native numeric value.</param>
    /// <param name="right">The ternary number to subtract.</param>
    /// <returns>A new ternary number containing the difference.</returns>
    public static Int27T operator -(Int64 left, Int27T right) => Create((Int128)left - right.value);

    /// <summary>
    /// Multiplies a ternary number by a native numeric value, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The ternary number.</param>
    /// <param name="right">The native numeric value to multiply by.</param>
    /// <returns>A new ternary number of the same type containing the product.</returns>
    public static Int27T operator *(Int27T left, Int64 right) => Create((Int128)left.value * right);

    /// <summary>
    /// Multiplies a native numeric value by a ternary number, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The native numeric value.</param>
    /// <param name="right">The ternary number to multiply by.</param>
    /// <returns>A new ternary number containing the product.</returns>
    public static Int27T operator *(Int64 left, Int27T right) => Create((Int128)left * right.value);

    /// <summary>
    /// Divides a ternary number by a native numeric value, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The ternary number to divide.</param>
    /// <param name="right">The native numeric value to divide by.</param>
    /// <returns>A new ternary number of the same type containing the quotient.</returns>
    public static Int27T operator /(Int27T left, Int64 right) => Create(left.value / right);

    /// <summary>
    /// Divides a native numeric value by a ternary number, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The native numeric value to divide.</param>
    /// <param name="right">The ternary number to divide by.</param>
    /// <returns>A new ternary number containing the quotient.</returns>
    public static Int27T operator /(Int64 left, Int27T right) => Create(left / right.value);

    /// <summary>
    /// Computes the remainder after dividing a ternary number by a native numeric value, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The ternary number to divide.</param>
    /// <param name="right">The native numeric value to divide by.</param>
    /// <returns>A new ternary number of the same type containing the remainder.</returns>
    public static Int27T operator %(Int27T left, Int64 right) => Create(left.value % right);

    /// <summary>
    /// Computes the remainder after dividing a native numeric value by a ternary number, maintaining the original ternary type.
    /// </summary>
    /// <param name="left">The native numeric value to divide.</param>
    /// <param name="right">The ternary number to divide by.</param>
    /// <returns>A new ternary number containing the remainder.</returns>
    public static Int27T operator %(Int64 left, Int27T right) => Create(left % right.value);
    #endregion
    
    #region Comparison Operators

    /// <summary>
    /// Returns a value indicating whether one <see cref="Int27T"/> is greater than another.
    /// </summary>
    /// <param name="left">The first value to compare.</param>
    /// <param name="right">The second value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, Int27T right) => left.value > right.value;

    /// <summary>
    /// Returns a value indicating whether one <see cref="Int27T"/> is less than another.
    /// </summary>
    /// <param name="left">The first value to compare.</param>
    /// <param name="right">The second value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, Int27T right) => left.value < right.value;

    /// <summary>
    /// Returns a value indicating whether one <see cref="Int27T"/> is greater than or equal to another.
    /// </summary>
    /// <param name="left">The first value to compare.</param>
    /// <param name="right">The second value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, Int27T right) => left.value >= right.value;

    /// <summary>
    /// Returns a value indicating whether one <see cref="Int27T"/> is less than or equal to another.
    /// </summary>
    /// <param name="left">The first value to compare.</param>
    /// <param name="right">The second value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, Int27T right) => left.value <= right.value;
     
    // Comparison operators with sbyte
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="sbyte"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="sbyte"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, sbyte right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="sbyte"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="sbyte"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, sbyte right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="sbyte"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="sbyte"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, sbyte right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="sbyte"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="sbyte"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, sbyte right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="sbyte"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="sbyte"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(sbyte left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="sbyte"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="sbyte"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(sbyte left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="sbyte"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="sbyte"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(sbyte left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="sbyte"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="sbyte"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(sbyte left, Int27T right) => left <= right.value;
     
    // Comparison operators with byte
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="byte"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="byte"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, byte right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="byte"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="byte"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, byte right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="byte"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="byte"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, byte right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="byte"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="byte"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, byte right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="byte"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="byte"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(byte left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="byte"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="byte"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(byte left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="byte"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="byte"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(byte left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="byte"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="byte"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(byte left, Int27T right) => left <= right.value;
     
    // Comparison operators with int
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="int"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="int"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, int right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="int"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="int"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, int right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="int"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="int"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, int right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="int"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="int"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, int right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="int"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="int"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(int left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="int"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="int"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(int left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="int"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="int"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(int left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="int"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="int"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(int left, Int27T right) => left <= right.value;
     
    // Comparison operators with uint
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="uint"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="uint"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, uint right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="uint"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="uint"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, uint right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="uint"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="uint"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, uint right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="uint"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="uint"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, uint right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="uint"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="uint"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(uint left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="uint"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="uint"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(uint left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="uint"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="uint"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(uint left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="uint"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="uint"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(uint left, Int27T right) => left <= right.value;
     
    // Comparison operators with short
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="short"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="short"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, short right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="short"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="short"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, short right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="short"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="short"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, short right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="short"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="short"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, short right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="short"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="short"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(short left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="short"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="short"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(short left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="short"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="short"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(short left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="short"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="short"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(short left, Int27T right) => left <= right.value;
     
    // Comparison operators with ushort
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="ushort"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="ushort"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, ushort right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="ushort"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="ushort"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, ushort right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="ushort"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="ushort"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, ushort right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="ushort"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="ushort"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, ushort right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="ushort"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="ushort"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(ushort left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="ushort"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="ushort"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(ushort left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="ushort"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="ushort"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(ushort left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="ushort"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="ushort"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(ushort left, Int27T right) => left <= right.value;
     
    // Comparison operators with long
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="long"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="long"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, long right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="long"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="long"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, long right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="long"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="long"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, long right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="long"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="long"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, long right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="long"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="long"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(long left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="long"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="long"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(long left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="long"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="long"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(long left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="long"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="long"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(long left, Int27T right) => left <= right.value;
     
    // Comparison operators with ulong
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="ulong"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="ulong"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, ulong right) => left.CompareTo(right) > 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="ulong"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="ulong"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, ulong right) => left.CompareTo(right) < 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="ulong"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="ulong"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, ulong right) => left.CompareTo(right) >= 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="ulong"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="ulong"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, ulong right) => left.CompareTo(right) <= 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="ulong"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="ulong"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(ulong left, Int27T right) => right.CompareTo(left) < 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="ulong"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="ulong"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(ulong left, Int27T right) => right.CompareTo(left) > 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="ulong"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="ulong"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(ulong left, Int27T right) => right.CompareTo(left) <= 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="ulong"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="ulong"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(ulong left, Int27T right) => right.CompareTo(left) >= 0;
     
    // Comparison operators with float
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="float"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="float"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, float right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="float"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="float"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, float right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="float"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="float"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, float right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="float"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="float"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, float right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="float"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="float"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(float left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="float"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="float"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(float left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="float"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="float"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(float left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="float"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="float"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(float left, Int27T right) => left <= right.value;
     
    // Comparison operators with double
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="double"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="double"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, double right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="double"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="double"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, double right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="double"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="double"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, double right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="double"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="double"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, double right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="double"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="double"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(double left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="double"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="double"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(double left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="double"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="double"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(double left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="double"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="double"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(double left, Int27T right) => left <= right.value;
     
    // Comparison operators with decimal
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="decimal"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="decimal"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, decimal right) => left.value > right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="decimal"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="decimal"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, decimal right) => left.value < right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="decimal"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="decimal"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, decimal right) => left.value >= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="decimal"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="decimal"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, decimal right) => left.value <= right;

    /// <summary>
    /// Returns a value indicating whether a <see cref="decimal"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="decimal"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(decimal left, Int27T right) => left > right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="decimal"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="decimal"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(decimal left, Int27T right) => left < right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="decimal"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="decimal"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(decimal left, Int27T right) => left >= right.value;

    /// <summary>
    /// Returns a value indicating whether a <see cref="decimal"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="decimal"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(decimal left, Int27T right) => left <= right.value;
     
    // Comparison operators with IComparable
    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than a <see cref="IComparable"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="IComparable"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(Int27T left, IComparable right) => left.CompareTo(right) > 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than a <see cref="IComparable"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="IComparable"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(Int27T left, IComparable right) => left.CompareTo(right) < 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is greater than or equal to a <see cref="IComparable"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="IComparable"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(Int27T left, IComparable right) => left.CompareTo(right) >= 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="Int27T"/> value is less than or equal to a <see cref="IComparable"/> value.
    /// </summary>
    /// <param name="left">The <see cref="Int27T"/> value to compare.</param>
    /// <param name="right">The <see cref="IComparable"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(Int27T left, IComparable right) => left.CompareTo(right) <= 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="IComparable"/> value is greater than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="IComparable"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >(IComparable left, Int27T right) => right.CompareTo(left) < 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="IComparable"/> value is less than a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="IComparable"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <(IComparable left, Int27T right) => right.CompareTo(left) > 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="IComparable"/> value is greater than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="IComparable"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator >=(IComparable left, Int27T right) => right.CompareTo(left) <= 0;

    /// <summary>
    /// Returns a value indicating whether a <see cref="IComparable"/> value is less than or equal to a <see cref="Int27T"/> value.
    /// </summary>
    /// <param name="left">The <see cref="IComparable"/> value to compare.</param>
    /// <param name="right">The <see cref="Int27T"/> value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    public static bool operator <=(IComparable left, Int27T right) => right.CompareTo(left) >= 0;

    #endregion
    
    internal string DebugView() => $"{this} ({this:ter})";

    // ToString implementation
    /// <summary>
    /// Returns a string representation of this instance.
    /// </summary>
    public override string ToString() => Formatter.Format(this, null, null);
    /// <summary>
    /// Returns a string representation of this instance.
    /// </summary>
    public string ToString(string? format) =>Formatter.Format(this, format, null);
    /// <summary>
    /// Returns a string representation of this instance.
    /// </summary>
    public string ToString(IFormatProvider? provider) => Formatter.Format(this, null, provider);
    /// <summary>
    /// Returns a string representation of this instance.
    /// </summary>
    public string ToString(string? format, IFormatProvider? provider) =>Formatter.Format(this, format, provider);
    /// <summary>
    /// Returns a string representation of this instance, formatted balanced ternarily according to the specified format.
    /// </summary>
    public string ToString(ITernaryFormat format) => Formatter.Format(this, format);

    // Parsing methods

    /// <summary>
    /// Parses a string representation of a Int27T.
    /// </summary>
    /// <param name="value">The string value to parse.</param>
    /// <returns>A Int27T representing the parsed value.</returns>
    public static Int27T Parse(string value) => Parser.ParseInt27T(value);
    
    /// <summary>
    /// Parses a string representation of a Int27T.
    /// </summary>
    /// <param name="value">The string value to parse.</param>
    /// <param name="format">The format to use for parsing.</param>
    /// <returns>A Int27T representing the parsed value.</returns>
    public static Int27T Parse(string value, ITernaryFormat? format) => Parser.ParseInt27T(value, format);
    
    /// <summary>
    /// Parses a string representation of a Int27T.
    /// </summary>
    /// <param name="value">The string value to parse.</param>
    /// <param name="options">The options to use for parsing.</param>
    /// <returns>A Int27T representing the parsed value.</returns>
    public static Int27T Parse(string value, TritParseOptions options) => Parser.ParseInt27T(value, null, options);
    
    /// <summary>
    /// Parses a string representation of a Int27T.
    /// </summary>
    /// <param name="value">The string value to parse.</param>
    /// <param name="format">The format to use for parsing.</param>
    /// <param name="options">The options to use for parsing.</param>
    /// <returns>A Int27T representing the parsed value.</returns>
    public static Int27T Parse(string value, ITernaryFormat? format, TritParseOptions options) => Parser.ParseInt27T(value, format, options);

    /// <summary>
    /// Converts the string representation of a number in a specified style to its <see cref="Int27T"/> equivalent.
    /// </summary>
    /// <param name="s">A string containing a number to convert.</param>
    /// <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s"/>.</param>
    /// <returns>A <see cref="Int27T"/> equivalent to the number contained in <paramref name="s"/>.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentException"><paramref name="style"/> is not a <see cref="NumberStyles"/> value or <paramref name="style"/> includes the <see cref="NumberStyles.AllowHexSpecifier"/> value.</exception>
    /// <exception cref="FormatException"><paramref name="s"/> is not in a format compliant with <paramref name="style"/>.</exception>
    /// <exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="Int27T.MinValue"/> or greater than <see cref="Int27T.MaxValue"/>.</exception>
    public static Int27T Parse(string s, NumberStyles style) => Create(Int64.Parse(s, style));

    /// <summary>
    /// Tries to convert the string representation of a number to its <see cref="Int27T"/> equivalent, and returns a value that indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="s">A string containing a number to convert.</param>
    /// <param name="result">When this method returns, contains the <see cref="Int27T"/> value equivalent to the number contained in <paramref name="s"/> if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
    /// <returns><see langword="true"/> if <paramref name="s"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
    public static bool TryParse(string? s, out Int27T result)
    {
        bool success = Int64.TryParse(s, out Int64 value);
        result = new Int27T(value);
        return success;
    }

    /// <summary>
    /// Compares this instance to a specified object and returns an indication of their relative values.
    /// </summary>
    /// <param name="obj">An object to compare, or <see langword="null"/>.</param>
    /// <returns>
    /// A signed number indicating the relative values of this instance and <paramref name="obj"/>.
    /// Return Value Description:
    /// Less than zero: This instance is less than <paramref name="obj"/>.
    /// Zero: This instance is equal to <paramref name="obj"/>.
    /// Greater than zero: This instance is greater than <paramref name="obj"/> or <paramref name="obj"/> is <see langword="null"/>.
    /// </returns>
    /// <exception cref="ArgumentException"><paramref name="obj"/> is not a <see cref="Int27T"/> or a type that can be converted to an integer.</exception>
    public int CompareTo(object? obj)
    {
        if (obj == null) return 1;
        if (obj is Int27T other) return CompareTo(other);

        // For large numeric types that exceed Int27T's range, return -1 if greater than MaxValue, 1 if less than MinValue
        try
        {
            if (obj is Int64 typed) return value.CompareTo(typed);
            if (obj is long int64)
            {
                return int64 switch
                {
                    > MaxValueConstant => -1,
                    < MinValueConstant => 1,
                    _ => value.CompareTo((Int64)int64)
                };
            }

            if (obj is uint uint32)
            {
                return value.CompareTo((Int64)uint32);
            }

            if (obj is ulong uint64)
            {
                return uint64 > (long)MaxValueConstant ? -1 : value.CompareTo((Int64)uint64);
            }

            if (obj is short int16) return value.CompareTo(int16);
            if (obj is ushort uint16) return value.CompareTo(uint16);
            if (obj is byte byteVal) return value.CompareTo(byteVal);
            if (obj is sbyte sbyteVal) return value.CompareTo(sbyteVal);
            if (obj is float singleValue)
            {
                return singleValue switch
                {
                    > MaxValueConstant => -1,
                    < MinValueConstant => 1,
                    _ => value.CompareTo((Int64)singleValue)
                };
            }

            if (obj is double doubleValue)
            {
                return doubleValue switch
                {
                    > MaxValueConstant => -1,
                    < MinValueConstant => 1,
                    _ => value.CompareTo((Int64)doubleValue)
                };
            }

            if (obj is decimal decimalValue)
            {
                return decimalValue switch
                {
                    > MaxValueConstant => -1,
                    < MinValueConstant => 1,
                    _ => value.CompareTo((Int64)decimalValue)
                };
            }

            if (obj is IConvertible convertible)
            {
                switch (convertible.GetTypeCode())
                {
                    case TypeCode.Int16:
                    case TypeCode.UInt16:
                    case TypeCode.Byte:
                    case TypeCode.SByte:
                        return value.CompareTo(convertible.ToInt32(null));
                    case TypeCode.Int32:
                        return value.CompareTo(convertible.ToInt32(null));
                    case TypeCode.UInt32:
                        var uint32Value = convertible.ToUInt32(null);
                        
                        return value.CompareTo((Int64)uint32Value);
                    case TypeCode.Int64:
                        var int64Value = convertible.ToInt64(null);
                        if (int64Value > MaxValueConstant) return -1;
                        if (int64Value < MinValueConstant) return 1;
                        return value.CompareTo((Int64)(int64Value));
                    case TypeCode.UInt64:
                        var uint64Value = convertible.ToUInt64(null);
                        if (uint64Value > (long)MaxValueConstant) return -1;
                        return value.CompareTo((Int64)uint64Value);
                    case TypeCode.Single:
                        var singleVal = convertible.ToSingle(null);
                        if (singleVal > MaxValueConstant) return -1;
                        if (singleVal < MinValueConstant) return 1;
                        return value.CompareTo((Int64)singleVal);
                    case TypeCode.Double:
                        var doubleVal = convertible.ToDouble(null);
                        if (doubleVal > MaxValueConstant) return -1;
                        if (doubleVal < MinValueConstant) return 1;
                        return value.CompareTo((Int64)doubleVal);
                    case TypeCode.Decimal:
                        var decimalVal = convertible.ToDecimal(null);
                        if (decimalVal > MaxValueConstant) return -1;
                        if (decimalVal < MinValueConstant) return 1;
                        return value.CompareTo((Int64)decimalVal);
                }
            }
        }
        catch (OverflowException)
        {
            // If conversion fails due to overflow, we can assume the value is outside our range
            return -1;
        }

        throw new ArgumentException("Object is not a valid type for comparison", nameof(obj));
    }

    /// <summary>
    /// Compares this instance to a specified <see cref="Int27T"/> object and returns an indication of their relative values.
    /// </summary>
    /// <param name="other">An <see cref="Int27T"/> object to compare.</param>
    /// <returns>
    /// A signed number indicating the relative values of this instance and <paramref name="other"/>.
    /// Return Value Description:
    /// Less than zero: This instance is less than <paramref name="other"/>.
    /// Zero: This instance is equal to <paramref name="other"/>.
    /// Greater than zero: This instance is greater than <paramref name="other"/>.
    /// </returns>
    public int CompareTo(Int27T other) => value.CompareTo(other.value);

    #region IConvertible Implementation

    /// <summary>
    /// Gets the <see cref="TypeCode"/> for this instance.
    /// </summary>
    /// <returns><see cref="TypeCode.Int32"/>.</returns>
    public TypeCode GetTypeCode() => TypeCode.Int32;

    /// <summary>
    /// Converts this instance to a <see cref="bool"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns><see langword="true"/> if the value is non-zero; otherwise, <see langword="false"/>.</returns>
    bool IConvertible.ToBoolean(IFormatProvider? provider) => value != 0;

    /// <summary>
    /// Converts this instance to a <see cref="char"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="char"/> value equivalent to this instance.</returns>
    char IConvertible.ToChar(IFormatProvider? provider) => Convert.ToChar(value);

    /// <summary>
    /// Converts this instance to an <see cref="sbyte"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>An <see cref="sbyte"/> value equivalent to this instance.</returns>
    sbyte IConvertible.ToSByte(IFormatProvider? provider) => Convert.ToSByte(value);

    /// <summary>
    /// Converts this instance to a <see cref="byte"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="byte"/> value equivalent to this instance.</returns>
    byte IConvertible.ToByte(IFormatProvider? provider) => Convert.ToByte(value);

    /// <summary>
    /// Converts this instance to a <see cref="short"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="short"/> value equivalent to this instance.</returns>
    short IConvertible.ToInt16(IFormatProvider? provider) => Convert.ToInt16(value);

    /// <summary>
    /// Converts this instance to a <see cref="ushort"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="ushort"/> value equivalent to this instance.</returns>
    ushort IConvertible.ToUInt16(IFormatProvider? provider) => Convert.ToUInt16(value);

    /// <summary>
    /// Converts this instance to an <see cref="int"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>An <see cref="int"/> value equivalent to this instance.</returns>
    int IConvertible.ToInt32(IFormatProvider? provider) => Convert.ToInt32(value);

    /// <summary>
    /// Converts this instance to a <see cref="uint"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="uint"/> value equivalent to this instance.</returns>
    uint IConvertible.ToUInt32(IFormatProvider? provider) => Convert.ToUInt32(value);

    /// <summary>
    /// Converts this instance to a <see cref="long"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="long"/> value equivalent to this instance.</returns>
    long IConvertible.ToInt64(IFormatProvider? provider) => Convert.ToInt64(value);

    /// <summary>
    /// Converts this instance to a <see cref="ulong"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="ulong"/> value equivalent to this instance.</returns>
    ulong IConvertible.ToUInt64(IFormatProvider? provider) => Convert.ToUInt64(value);

    /// <summary>
    /// Converts this instance to a <see cref="float"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="float"/> value equivalent to this instance.</returns>
    float IConvertible.ToSingle(IFormatProvider? provider) => Convert.ToSingle(value);

    /// <summary>
    /// Converts this instance to a <see cref="double"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="double"/> value equivalent to this instance.</returns>
    double IConvertible.ToDouble(IFormatProvider? provider) => Convert.ToDouble(value);

    /// <summary>
    /// Converts this instance to a <see cref="decimal"/> value.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="decimal"/> value equivalent to this instance.</returns>
    decimal IConvertible.ToDecimal(IFormatProvider? provider) => Convert.ToDecimal(value);

    /// <summary>
    /// This conversion is not supported and will always throw <see cref="InvalidCastException"/>.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>This method never returns; it always throws <see cref="InvalidCastException"/>.</returns>
    /// <exception cref="InvalidCastException">This conversion is not supported.</exception>
    DateTime IConvertible.ToDateTime(IFormatProvider? provider) => throw new InvalidCastException();

    /// <summary>
    /// Converts this instance to its string representation.
    /// </summary>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A string representation of this instance.</returns>
    string IConvertible.ToString(IFormatProvider? provider) => value.ToString(provider);

    /// <summary>
    /// Converts this instance to an object of the specified type.
    /// </summary>
    /// <param name="conversionType">The target type for the conversion.</param>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>An object whose type is <paramref name="conversionType"/> and whose value is equivalent to this instance.</returns>
    object IConvertible.ToType(Type conversionType, IFormatProvider? provider) =>
        Convert.ChangeType(value, conversionType, provider);

    #endregion

    #region IUtf8SpanFormattable Implementation

    bool IUtf8SpanFormattable.TryFormat(Span<byte> utf8Destination, out int bytesWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
         => Formatter.TryFormat(value, utf8Destination, out bytesWritten, format, provider);

    #endregion

    #region IIncrementOperators/IDecrementOperators Implementation

    /// <summary>
    /// Increments a ternary number by one, maintaining the original numeric type.
    /// </summary>
    /// <param name="value">The ternary number to increment.</param>
    /// <returns>A new ternary number with a value one greater than <paramref name="value"/>.</returns>
    public static Int27T operator ++(Int27T value) => Create(value.value + 1);

    /// <summary>
    /// Decrements a ternary number by one, maintaining the original numeric type.
    /// </summary>
    /// <param name="value">The ternary number to decrement.</param>
    /// <returns>A new ternary number with a value one less than <paramref name="value"/>.</returns>
    public static Int27T operator --(Int27T value) => Create(value.value - 1);

    #endregion

    /// <summary>
    /// Determines whether two <see cref="Int27T"/> values are equal.
    /// </summary>
    /// <param name="left">The first value to compare.</param>
    /// <param name="right">The second value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    static bool IEqualityOperators<Int27T, Int27T, bool>.operator ==(Int27T left, Int27T right) => left.value == right.value;

    /// <summary>
    /// Determines whether two <see cref="Int27T"/> values are not equal.
    /// </summary>
    /// <param name="left">The first value to compare.</param>
    /// <param name="right">The second value to compare.</param>
    /// <returns><see langword="true"/> if <paramref name="left"/> is not equal to <paramref name="right"/>; otherwise, <see langword="false"/>.</returns>
    static bool IEqualityOperators<Int27T, Int27T, bool>.operator !=(Int27T left, Int27T right) => left.value != right.value;

    #region Binary Operations

    
/// <summary>
/// Performs a left shift operation on the ternary number, maintaining the original numeric type.
/// </summary>
/// <param name="value">The ternary number to shift.</param>
/// <param name="shiftAmount">The number of positions to shift left. Negative values result in a right shift.</param>
/// <returns>A new ternary number of the same type containing the shifted value.</returns>
public static Int27T operator <<(Int27T value, int shiftAmount) => Create(value.value.Shift(-shiftAmount));

/// <summary>
/// Performs a right shift operation on the ternary number, maintaining the original numeric type.
/// </summary>
/// <param name="value">The ternary number to shift.</param>
/// <param name="shiftAmount">The number of positions to shift right. Negative values result in a left shift.</param>
/// <returns>A new ternary number of the same type containing the shifted value.</returns>
public static Int27T operator >> (Int27T value, int shiftAmount) => Create(value.value.Shift(shiftAmount));

/// <summary>
/// Performs an unsigned right shift operation on the ternary number, maintaining the original numeric type.
/// In this implementation, it behaves the same as the signed right shift.
/// </summary>
/// <param name="value">The ternary number to shift.</param>
/// <param name="shiftAmount">The number of positions to shift right. Negative values result in a left shift.</param>
/// <returns>A new ternary number of the same type containing the shifted value.</returns>
public static Int27T operator >>> (Int27T value, int shiftAmount) => Create(value.value.Shift(shiftAmount));

/// <summary>
/// Applies a unary operation to each trit in this ternary number. This operation converts the number to a TernaryArray.
/// </summary>
/// <param name="value">The ternary number to convert and operate on.</param>
/// <param name="operation">The unary operation to apply to each trit.</param>
/// <returns>A new TernaryArray containing the result of applying the operation.</returns>
/// <remarks>This operation causes an implicit conversion to TernaryArray before applying the operation.</remarks>
public static TernaryArray27 operator |(Int27T value, Func<Trit, Trit> operation)
{
    TernaryArray27 array = value;
    return array | operation;
}

/// <summary>
/// Combines each trit in this ternary number with the corresponding trit in the provided array. This operation converts the number to a TernaryArray.
/// </summary>
/// <param name="value">The ternary number to convert and combine.</param>
/// <param name="trits">The array of trits to combine with.</param>
/// <returns>A new TernaryArray containing the result of the operation.</returns>
/// <remarks>This operation causes an implicit conversion to TernaryArray before combining with the provided trits.</remarks>
public static TernaryArray27 operator |(Int27T value, Trit[] trits)
{
    TernaryArray27 array = value;
    return array | trits;
}

    #endregion
    
    #region Indexers
    
    /// <summary>
    /// Gets the trit at the specified index in this <see cref="Int27T"/>.
    /// </summary>
    public Trit this[int index] => TritShift.Index(value, index, 27);
    
    /// <summary>
    /// Gets the trit at the specified index in this <see cref="Int27T"/>.
    /// </summary>
    public Trit this[Index index] => TritShift.Index(value, index.GetOffset(27), 27);
    
    #endregion

    #region Interface Static Members

    /// <summary>
    /// Returns the value -1 as a <see cref="Int27T"/>.
    /// </summary>
    static Int27T ISignedNumber<Int27T>.NegativeOne => new(-1);

    /// <summary>
    /// Returns the value 1 as a <see cref="Int27T"/>.
    /// </summary>
    static Int27T INumberBase<Int27T>.One => new(1);

    /// <summary>
    /// Returns the value 0 as a <see cref="Int27T"/>.
    /// </summary>
    static Int27T INumberBase<Int27T>.Zero => new(0);

    /// <summary>
    /// Returns the additive identity (0) for <see cref="Int27T"/>.
    /// </summary>
    static Int27T IAdditiveIdentity<Int27T, Int27T>.AdditiveIdentity => new(0);

    /// <summary>
    /// Returns the multiplicative identity (1) for <see cref="Int27T"/>.
    /// </summary>
    static Int27T IMultiplicativeIdentity<Int27T, Int27T>.MultiplicativeIdentity => new(1);

    /// <summary>
    /// Returns <see langword="true"/> as all <see cref="Int27T"/> values are canonical.
    /// </summary>
    static bool INumberBase<Int27T>.IsCanonical(Int27T value) => true;

    /// <summary>
    /// Returns <see langword="false"/> as <see cref="Int27T"/> values are not complex numbers.
    /// </summary>
    static bool INumberBase<Int27T>.IsComplexNumber(Int27T value) => false;

    /// <summary>
    /// Determines whether the specified value is an even integer.
    /// </summary>
    static bool INumberBase<Int27T>.IsEvenInteger(Int27T value) => value.value % 2 == 0;

    /// <summary>
    /// Returns <see langword="true"/> as all <see cref="Int27T"/> values are finite.
    /// </summary>
    static bool INumberBase<Int27T>.IsFinite(Int27T value) => true;

    /// <summary>
    /// Returns <see langword="false"/> as <see cref="Int27T"/> values are not imaginary numbers.
    /// </summary>
    static bool INumberBase<Int27T>.IsImaginaryNumber(Int27T value) => false;

    /// <summary>
    /// Returns <see langword="false"/> as <see cref="Int27T"/> values cannot be infinite.
    /// </summary>
    static bool INumberBase<Int27T>.IsInfinity(Int27T value) => false;

    /// <summary>
    /// Returns <see langword="true"/> as all <see cref="Int27T"/> values are integers.
    /// </summary>
    static bool INumberBase<Int27T>.IsInteger(Int27T value) => true;

    /// <summary>
    /// Returns <see langword="false"/> as <see cref="Int27T"/> values cannot be NaN.
    /// </summary>
    static bool INumberBase<Int27T>.IsNaN(Int27T value) => false;

    /// <summary>
    /// Returns <see langword="true"/> if the value is less than zero.
    /// </summary>
    static bool INumberBase<Int27T>.IsNegative(Int27T value) => value.value < 0;

    /// <summary>
    /// Returns <see langword="false"/> as <see cref="Int27T"/> values cannot be negative infinity.
    /// </summary>
    static bool INumberBase<Int27T>.IsNegativeInfinity(Int27T value) => false;

    /// <summary>
    /// Returns <see langword="true"/> if the value is non-zero.
    /// </summary>
    static bool INumberBase<Int27T>.IsNormal(Int27T value) => value.value != 0;

    /// <summary>
    /// Determines whether the specified value is an odd integer.
    /// </summary>
    static bool INumberBase<Int27T>.IsOddInteger(Int27T value) => value.value % 2 != 0;

    /// <summary>
    /// Returns <see langword="true"/> if the value is greater than zero.
    /// </summary>
    static bool INumberBase<Int27T>.IsPositive(Int27T value) => value.value > 0;

    /// <summary>
    /// Returns <see langword="false"/> as <see cref="Int27T"/> values cannot be positive infinity.
    /// </summary>
    static bool INumberBase<Int27T>.IsPositiveInfinity(Int27T value) => false;

    /// <summary>
    /// Returns <see langword="true"/> as all <see cref="Int27T"/> values are real numbers.
    /// </summary>
    static bool INumberBase<Int27T>.IsRealNumber(Int27T value) => true;

    /// <summary>
    /// Returns <see langword="false"/> as <see cref="Int27T"/> values cannot be subnormal.
    /// </summary>
    static bool INumberBase<Int27T>.IsSubnormal(Int27T value) => false;

    /// <summary>
    /// Returns <see langword="true"/> if the value is zero.
    /// </summary>
    static bool INumberBase<Int27T>.IsZero(Int27T value) => value.value == 0;

    /// <summary>
    /// Returns the value with the greater absolute value.
    /// </summary>
    static Int27T INumberBase<Int27T>.MaxMagnitude(Int27T x, Int27T y) =>
        Math.Abs(x.value) > Math.Abs(y.value) ? x : y;

    /// <summary>
    /// Returns the value with the greater absolute value.
    /// </summary>
    static Int27T INumberBase<Int27T>.MaxMagnitudeNumber(Int27T x, Int27T y) =>
        Math.Abs(x.value) > Math.Abs(y.value) ? x : y;

    /// <summary>
    /// Returns the value with the lesser absolute value.
    /// </summary>
    static Int27T INumberBase<Int27T>.MinMagnitude(Int27T x, Int27T y) =>
        Math.Abs(x.value) < Math.Abs(y.value) ? x : y;

    /// <summary>
    /// Returns the value with the lesser absolute value.
    /// </summary>
    static Int27T INumberBase<Int27T>.MinMagnitudeNumber(Int27T x, Int27T y) =>
        Math.Abs(x.value) < Math.Abs(y.value) ? x : y;

    /// <summary>
    /// Gets the radix (base) for this numeric type.
    /// </summary>
    static int INumberBase<Int27T>.Radix => 2;

    /// <summary>
    /// Returns the absolute value of the specified value.
    /// </summary>
    static Int27T INumberBase<Int27T>.Abs(Int27T value) =>
        value.value < 0 ? new((Int64)(-value.value)) : value;

    static Int27T INumberBase<Int27T>.Parse(ReadOnlySpan<char> s, NumberStyles style, IFormatProvider? provider) =>
        Create(Int64.Parse(s, style, provider));

    static Int27T INumberBase<Int27T>.Parse(string s, NumberStyles style, IFormatProvider? provider) =>
        Create(Int64.Parse(s, style, provider));

    static bool INumberBase<Int27T>.TryParse(ReadOnlySpan<char> s, NumberStyles style, IFormatProvider? provider, out Int27T result)
    {
        if (Int64.TryParse(s, style, provider, out var parsed))
        {
            result = Create(parsed);
            return true;
        }

        result = default;
        return false;
    }

    static bool INumberBase<Int27T>.TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, out Int27T result)
    {
        if (Int64.TryParse(s, style, provider, out var parsed))
        {
            result = Create(parsed);
            return true;
        }

        result = default;
        return false;
    }

    #endregion

    #region ISpanFormattable/ISpanParsable Implementation

    /// <summary>
    /// Parses a ternary number from a character span.
    /// </summary>
    /// <param name="s">The span containing the characters to parse.</param>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="Int27T"/> that represents the parsed value.</returns>
    static Int27T ISpanParsable<Int27T>.Parse(ReadOnlySpan<char> s, IFormatProvider? provider) =>
        new(Int64.Parse(s, NumberStyles.Integer, provider));

    /// <summary>
    /// Attempts to parse a ternary number from a character span.
    /// </summary>
    /// <param name="s">The span containing the characters to parse.</param>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <param name="result">When this method returns, contains the parsed value if successful; otherwise, the default value.</param>
    /// <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
    static bool ISpanParsable<Int27T>.TryParse(ReadOnlySpan<char> s, IFormatProvider? provider, out Int27T result)
    {
        if (Int64.TryParse(s, NumberStyles.Integer, provider, out var value))
        {
            result = new(value);
            return true;
        }

        result = default;
        return false;
    }

    /// <summary>
    /// Tries to format the value of the current instance into the provided span of characters.
    /// </summary>
    /// <param name="destination">The span in which to write this instance's value formatted as a span of characters.</param>
    /// <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination"/>.</param>
    /// <param name="format">A span containing the characters that represent a standard or custom format string.</param>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns><see langword="true"/> if the formatting was successful; otherwise, <see langword="false"/>.</returns>
    bool ISpanFormattable.TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider) 
        => Formatter.TryFormat(value, destination, out charsWritten, format, provider);

    /// <summary>
    /// Parses a string to a ternary number.
    /// </summary>
    /// <param name="s">The string to parse.</param>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <returns>A <see cref="Int27T"/> that represents the parsed value.</returns>
    static Int27T IParsable<Int27T>.Parse(string s, IFormatProvider? provider) =>
        new(Int64.Parse(s, NumberStyles.Integer, provider));

    /// <summary>
    /// Attempts to parse a string to a ternary number.
    /// </summary>
    /// <param name="s">The string to parse.</param>
    /// <param name="provider">An object that supplies culture-specific formatting information.</param>
    /// <param name="result">When this method returns, contains the parsed value if successful; otherwise, the default value.</param>
    /// <returns><see langword="true"/> if the parsing was successful; otherwise, <see langword="false"/>.</returns>
    static bool IParsable<Int27T>.TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, out Int27T result)
    {
        if (Int64.TryParse(s, NumberStyles.Integer, provider, out var value))
        {
            result = new(value);
            return true;
        }

        result = default;
        return false;
    }

    #endregion

    #region Generic Conversions

    /// <summary>
    /// Attempts to convert a value to a ternary number with overflow checking.
    /// </summary>
    /// <typeparam name="TOther">The type to convert from.</typeparam>
    /// <param name="value">The value to convert.</param>
    /// <param name="result">When this method returns, contains the converted value if successful; otherwise, the default value.</param>
    /// <returns><see langword="true"/> if the conversion was successful; otherwise, <see langword="false"/>.</returns>
    static bool INumberBase<Int27T>.TryConvertFromChecked<TOther>(TOther value, out Int27T result)
    {
        if (value is IConvertible conv)
        {
            try
            {
                var intValue = conv.ToInt64(null);
                if (intValue >= MinValueConstant && intValue <= MaxValueConstant)
                {
                    result = Create(intValue);
                    return true;
                }
            }
            catch
            {
                // Fall through to default
            }
        }

        result = default;
        return false;
    }

    /// <summary>
    /// Attempts to convert a value to a ternary number with saturation.
    /// </summary>
    /// <typeparam name="TOther">The type to convert from.</typeparam>
    /// <param name="value">The value to convert.</param>
    /// <param name="result">When this method returns, contains the converted value if successful; otherwise, the default value.</param>
    /// <returns><see langword="true"/> if the conversion was successful; otherwise, <see langword="false"/>.</returns>
    static bool INumberBase<Int27T>.TryConvertFromSaturating<TOther>(TOther value, out Int27T result)
    {
        if (value is IConvertible conv)
        {
            try
            {
                var intValue = conv.ToInt64(null);
                result = Create(intValue);
                return true;
            }
            catch
            {
                // Fall through to default
            }
        }

        result = default;
        return false;
    }

    /// <summary>
    /// Attempts to convert a value to a ternary number with truncation.
    /// </summary>
    /// <typeparam name="TOther">The type to convert from.</typeparam>
    /// <param name="value">The value to convert.</param>
    /// <param name="result">When this method returns, contains the converted value if successful; otherwise, the default value.</param>
    /// <returns><see langword="true"/> if the conversion was successful; otherwise, <see langword="false"/>.</returns>
    static bool INumberBase<Int27T>.TryConvertFromTruncating<TOther>(TOther value, out Int27T result)
    {
        if (value is IConvertible conv)
        {
            try
            {
                var intValue = conv.ToInt64(null);
                result = Create(intValue);
                return true;
            }
            catch
            {
                // Fall through to default
            }
        }

        result = default;
        return false;
    }

    /// <summary>
    /// Attempts to convert a ternary number to another type with overflow checking.
    /// </summary>
    /// <typeparam name="TOther">The type to convert to.</typeparam>
    /// <param name="value">The value to convert.</param>
    /// <param name="result">When this method returns, contains the converted value if successful; otherwise, the default value.</param>
    /// <returns><see langword="true"/> if the conversion was successful; otherwise, <see langword="false"/>.</returns>
    static bool INumberBase<Int27T>.TryConvertToChecked<TOther>(Int27T value, [MaybeNullWhen(false)] out TOther result)
        where TOther : default
    {
        if (typeof(TOther) == typeof(Int64))
        {
            result = (TOther)(object)value.value;
            return true;
        }

        result = default;
        return false;
    }

    /// <summary>
    /// Attempts to convert a ternary number to another type with saturation.
    /// </summary>
    /// <typeparam name="TOther">The type to convert to.</typeparam>
    /// <param name="value">The value to convert.</param>
    /// <param name="result">When this method returns, contains the converted value if successful; otherwise, the default value.</param>
    /// <returns><see langword="true"/> if the conversion was successful; otherwise, <see langword="false"/>.</returns>
    static bool INumberBase<Int27T>.TryConvertToSaturating<TOther>(Int27T value, [MaybeNullWhen(false)] out TOther result)
        where TOther : default
    {
        if (typeof(TOther) == typeof(Int64))
        {
            result = (TOther)(object)value.value;
            return true;
        }

        result = default;
        return false;
    }

    /// <summary>
    /// Attempts to convert a ternary number to another type with truncation.
    /// </summary>
    /// <typeparam name="TOther">The type to convert to.</typeparam>
    /// <param name="value">The value to convert.</param>
    /// <param name="result">When this method returns, contains the converted value if successful; otherwise, the default value.</param>
    /// <returns><see langword="true"/> if the conversion was successful; otherwise, <see langword="false"/>.</returns>
    static bool INumberBase<Int27T>.TryConvertToTruncating<TOther>(Int27T value, [MaybeNullWhen(false)] out TOther result)
        where TOther : default
    {
        if (typeof(TOther) == typeof(Int64))
        {
            result = (TOther)(object)value.value;
            return true;
        }

        result = default;
        return false;
    }

    #endregion
}