// <auto-generated />
namespace Ternary3;

using Operators;
using Operators.Operations;
using TernaryArrays;

/// <summary>
/// Represents an operator that combines a TernaryArray3 with a binary operation lookup table.
/// </summary>
/// <remarks>
/// Used to efficiently apply binary operations between TernaryArray3 instances by using optimized lookup tables.
/// The first operand is stored within the operator structure, and the second operand is provided via the pipe operator.
/// </remarks>
public readonly struct LookupTernaryArray3Operator
{
    private readonly TernaryArray3 trits;
    private readonly BinaryTritOperator table;

    internal LookupTernaryArray3Operator(TernaryArray3 trits, BinaryTritOperator table)
    {
        this.trits = trits;
        this.table = table;
    }

    internal LookupTernaryArray3Operator(TernaryArray3 trits, Trit[,] table)
        : this(trits, new BinaryTritOperator(table))
    {
    }

    internal LookupTernaryArray3Operator(TernaryArray3 trits, ReadOnlySpan<Trit> table)
        : this(trits, new BinaryTritOperator(table))
    {
    }

    internal LookupTernaryArray3Operator(TernaryArray3 trits, Func<Trit, Trit, Trit> operation)
        : this(trits, new BinaryTritOperator(operation))
    {
    }

    /// <summary>
    /// Performs a binary operation between the stored left operand (TernaryArray3) and the right operand using a lookup table.
    /// </summary>
    /// <param name="left">The LookupTernaryArray3Operator containing the left operand and operation details.</param>
    /// <param name="right">The right TernaryArray3 operand.</param>
    /// <returns>A new TernaryArray3 representing the result of applying the binary operation to each corresponding pair of trits.</returns>
    public static TernaryArray3 operator |(LookupTernaryArray3Operator left, TernaryArray3 right)
    {
        left.table.Apply(left.trits.Negative, left.trits.Positive, right.Negative, right.Positive, out var negative, out var positive);
        return new(negative, positive);
    }
    
    /// <summary>
    /// Performs a binary operation between the stored left operand (TernaryArray3) and an Int3T right operand using a lookup table.
    /// </summary>
    /// <param name="left">The LookupTernaryArray3Operator containing the left operand and operation details.</param>
    /// <param name="right">The right Int3T operand, which will be converted to a TernaryArray3.</param>
    /// <returns>A new TernaryArray3 representing the result of applying the binary operation to each corresponding pair of trits.</returns>
    public static TernaryArray3 operator |(LookupTernaryArray3Operator left, Int3T right)
    {
        var TernaryArray = (TernaryArray3)right;
        left.table.Apply(left.trits.Negative, left.trits.Positive, TernaryArray.Negative, TernaryArray.Positive, out var negative, out var positive);
        return new(negative, positive);
    }
       
    /// <summary>
    /// Performs a binary operation between the stored left operand (TernaryArray3) and a SByte right operand using a lookup table.
    /// </summary>
    /// <param name="left">The LookupTernaryArray3Operator containing the left operand and operation details.</param>
    /// <param name="right">The right SByte operand, which will be converted to a TernaryArray3.</param>
    /// <returns>A new TernaryArray3 representing the result of applying the binary operation to each corresponding pair of trits.</returns>
    public static TernaryArray3 operator |(LookupTernaryArray3Operator left, SByte right)
    {
        TritConverter.To32Trits(right, out var rightNegative, out var rightPositive);
        left.table.Apply(left.trits.Negative, left.trits.Positive, (Byte)rightNegative, (Byte)rightPositive, out var negative, out var positive);
        return new(negative, positive);
    }
}