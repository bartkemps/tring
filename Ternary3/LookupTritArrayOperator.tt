<#@ template debug="false" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
<#@ import namespace="System.Linq" #>
<#
    // Define the trit array sizes to generate operators for
    var tritArraySizes = new List<(int Trits, string BackingType, string[] types)>
    {
        (3, "Byte",["SByte"]),
        (9, "UInt16",["Int16"]), 
        (27, "UInt32",["Int32","Int64"])
    };

    // Loop through each size and generate its file
    foreach (var (size, backingType, types) in tritArraySizes)
    {
        // Generate the file content
        var fileContent = GenerateLookupTritArrayOperator(size, backingType, types);

        // Determine the output file path
        var outputFilePath = Host.ResolvePath($"LookupTritArray{size}Operator.cs");

        // Write the content to the file
        File.WriteAllText(outputFilePath, fileContent);
    }
#>
LastGenerated = <#= DateTime.Now.ToString() #>

<#+
// This method generates the code for a LookupTritArrayOperator class
private string GenerateLookupTritArrayOperator(int tritArraySize, string backingType, string[] types)
{
    return $$"""
           // <auto-generated />
           namespace Ternary3;
           
           using Operators;
           using Operators.Operations;
           using TritArrays;
           
           /// <summary>
           /// Represents an operator that combines a TritArray{{tritArraySize}} with a binary operation lookup table.
           /// </summary>
           /// <remarks>
           /// Used to efficiently apply binary operations between TritArray{{tritArraySize}} instances by using optimized lookup tables.
           /// The first operand is stored within the operator structure, and the second operand is provided via the pipe operator.
           /// </remarks>
           public readonly struct LookupTritArray{{tritArraySize}}Operator
           {
               private readonly TritArray{{tritArraySize}} trits;
               private readonly BinaryTritOperator table;
           
               internal LookupTritArray{{tritArraySize}}Operator(TritArray{{tritArraySize}} trits, BinaryTritOperator table)
               {
                   this.trits = trits;
                   this.table = table;
               }
           
               internal LookupTritArray{{tritArraySize}}Operator(TritArray{{tritArraySize}} trits, Trit[,] table)
                   : this(trits, new BinaryTritOperator(table))
               {
               }
           
               internal LookupTritArray{{tritArraySize}}Operator(TritArray{{tritArraySize}} trits, ReadOnlySpan<Trit> table)
                   : this(trits, new BinaryTritOperator(table))
               {
               }
           
               internal LookupTritArray{{tritArraySize}}Operator(TritArray{{tritArraySize}} trits, Func<Trit, Trit, Trit> operation)
                   : this(trits, new BinaryTritOperator(operation))
               {
               }
           
               /// <summary>
               /// Performs a binary operation between the stored left operand (TritArray{{tritArraySize}}) and the right operand using a lookup table.
               /// </summary>
               /// <param name="left">The LookupTritArray{{tritArraySize}}Operator containing the left operand and operation details.</param>
               /// <param name="right">The right TritArray{{tritArraySize}} operand.</param>
               /// <returns>A new TritArray{{tritArraySize}} representing the result of applying the binary operation to each corresponding pair of trits.</returns>
               public static TritArray{{tritArraySize}} operator |(LookupTritArray{{tritArraySize}}Operator left, TritArray{{tritArraySize}} right)
               {
                   left.table.Apply(left.trits.Negative, left.trits.Positive, right.Negative, right.Positive, out var negative, out var positive);
                   return new(negative, positive);
               }
               
               /// <summary>
               /// Performs a binary operation between the stored left operand (TritArray{{tritArraySize}}) and an Int{{tritArraySize}}T right operand using a lookup table.
               /// </summary>
               /// <param name="left">The LookupTritArray{{tritArraySize}}Operator containing the left operand and operation details.</param>
               /// <param name="right">The right Int{{tritArraySize}}T operand, which will be converted to a TritArray{{tritArraySize}}.</param>
               /// <returns>A new TritArray{{tritArraySize}} representing the result of applying the binary operation to each corresponding pair of trits.</returns>
               public static TritArray{{tritArraySize}} operator |(LookupTritArray{{tritArraySize}}Operator left, Int{{tritArraySize}}T right)
               {
                   var tritArray = (TritArray{{tritArraySize}})right;
                   left.table.Apply(left.trits.Negative, left.trits.Positive, tritArray.Negative, tritArray.Positive, out var negative, out var positive);
                   return new(negative, positive);
               }
               {{string.Join("\r\n", types.Select(type => PipeToTypeOperator(tritArraySize, backingType, type)))}}
           }
           """;
}

private string PipeToTypeOperator(int tritArraySize, string backingType, string type)
{
    return $$"""
           
            /// <summary>
            /// Performs a binary operation between the stored left operand (TritArray{{tritArraySize}}) and a {{type}} right operand using a lookup table.
            /// </summary>
            /// <param name="left">The LookupTritArray{{tritArraySize}}Operator containing the left operand and operation details.</param>
            /// <param name="right">The right {{type}} operand, which will be converted to a TritArray{{tritArraySize}}.</param>
            /// <returns>A new TritArray{{tritArraySize}} representing the result of applying the binary operation to each corresponding pair of trits.</returns>
            public static TritArray{{tritArraySize}} operator |(LookupTritArray{{tritArraySize}}Operator left, {{type}} right)
            {
                TritConverter.ConvertTo32Trits(right, out var rightNegative, out var rightPositive);
                left.table.Apply(left.trits.Negative, left.trits.Positive, ({{backingType}})rightNegative, ({{backingType}})rightPositive, out var negative, out var positive);
                return new(negative, positive);
            }
        """;
}
#>
