<#@ template language="C#" hostspecific="True" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
// <auto-generated />
namespace Ternary3.Operators.Operations;

using System;
using System.Numerics;

internal static class BinaryOperation
{
    public static T GetTrits<T>(int index, T n1, T p1, T n2, T p2)
        where T : struct, IBinaryInteger<T>, IMinMaxValue<T>
    {
        return index switch
        {
<#
    for (int i = 0; i < 512; i++)
    {
#>
            <#= i #> => <#= GetExpression(i) #>,  
<#
    }
#>
            _ => throw new ArgumentOutOfRangeException(nameof(index), "Index must be between 0 and 511.")
        };
    }
}

<#
    string GetExpression(int value)
    {
        // Create a BitArray from the value
        BitArray bits = new(9);
        BitArray notbits = new(9);
        var count = 0;
        for (var i = 0; i < 9; i++)
        {
            var bit = ((value >>  i) & 1) == 1;
            bits[i] = bit;
            notbits[i] = !bit;
            if (bit) count++;
        }

        // bits is always 9 bits.
        // order: (T,T), (T,0), (T,1), (0,T), (0,0), (0,1), (1,T), (1,0), (1,1)
        // (corresponding to bits[0] to bits[8])
        // expressions for each bit:
        // bit 0 (T, T) => n1 & n2
        // bit 1 (T, 0) => n1 & ~(p2 | n2)
        // bit 2 (T, 1) => n1 & p2
        // bit 3 (0, T) => ~(p1 | n1) & n2
        // bit 4 (0, 0) => ~(p1 | n1) & ~(p2 | n2)
        // bit 5 (0, 1) => ~(p1 | n1) & p2
        // bit 6 (1, T) => p1 & n2
        // bit 7 (1, 0) => p1 & ~(p2 | n2)
        // bit 8 (1, 1) => p1 & p2

        // If no bits are set, return a default value
        if (count == 0) return "T.Zero";
        // All bits set - return all ones
        if (count == 9) return "T.MaxValue";

        if (count == 1)
        {
            return GetByBits(bits).First();
        }
        
        if (count ==8)
        {
            return Not(GetByBits(notbits).First());
        }

        // Calculate some possibilities for optimization
        var allT_ = bits[0] && bits[1] && bits[2];
        var all0_ = bits[3] && bits[4] && bits[5];
        var all1_ = bits[6] && bits[7] && bits[8];
        var all_T = bits[0] && bits[3] && bits[6];
        var all_0 = bits[1] && bits[4] && bits[7];
        var all_1 = bits[2] && bits[5] && bits[8];

        var noneT_ = !bits[0] && !bits[1] && !bits[2];
        var none0_ = !bits[3] && !bits[4] && !bits[5];
        var none1_ = !bits[6] && !bits[7] && !bits[8];
        var none_T = !bits[0] && !bits[3] && !bits[6];
        var none_0 = !bits[1] && !bits[4] && !bits[7];
        var none_1 = !bits[2] && !bits[5] && !bits[8];

        var duplicateT_0_ = bits[0] == bits[3] && bits[1] == bits[4] && bits[2] == bits[5];
        var duplicate0_1_ = bits[3] == bits[6] && bits[4] == bits[7] && bits[5] == bits[8];
        var duplicate1_T_ = bits[0] == bits[6] && bits[1] == bits[7] && bits[2] == bits[8];
        var duplicate_T_0 = bits[0] == bits[1] && bits[3] == bits[4] && bits[6] == bits[7];
        var duplicate_0_1 = bits[1] == bits[2] && bits[4] == bits[5] && bits[7] == bits[8];
        var duplicate_1_T = bits[0] == bits[2] && bits[3] == bits[5] && bits[6] == bits[8];
        
        

        return count > 5 
            ? Not(string.Join("|", GetByBits(notbits).Select(p => $"({p})")))
            : string.Join("|", GetByBits(bits).Select(p => $"({p})"));
    }

    IEnumerable<string>  GetByBits(BitArray bits)
    {
        if (bits[0]) yield return "n1 & n2";
        if (bits[1]) yield return "n1 & ~(p2 | n2)";
        if (bits[2]) yield return "n1 & p2";
        if (bits[3]) yield return "~(p1 | n1) & n2";
        if (bits[4]) yield return "~(p1 | n1 | p2 | n2)";
        if (bits[5]) yield return "~(p1 | n1) & p2";
        if (bits[6]) yield return "p1 & n2";
        if (bits[7]) yield return "p1 & ~(p2 | n2)";
        if (bits[8]) yield return "p1 & p2";
    }
    
    string Not(string expression) => $"~({expression})";
#>