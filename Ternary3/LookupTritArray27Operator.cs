// <auto-generated />
namespace Ternary3;

using Operators;
using Operators.Operations;
using TritArrays;

public readonly struct LookupTritArray27Operator
{
    private readonly TritArray27 trits;
    private readonly BinaryOperationBuilder<UInt32> builder;

    internal LookupTritArray27Operator(TritArray27 trits, BinaryTritOperator table)
    {
        this.trits = trits;
        this.builder = new(table);
    }

    internal LookupTritArray27Operator(TritArray27 trits, Trit[,] table)
        : this(trits, new BinaryTritOperator(table))
    {
    }

    internal LookupTritArray27Operator(TritArray27 trits, ReadOnlySpan<Trit> table)
        : this(trits, new BinaryTritOperator(table))
    {
    }

    internal LookupTritArray27Operator(TritArray27 trits, Func<Trit, Trit, Trit> operation)
        : this(trits, new BinaryTritOperator(operation))
    {
    }

    public static TritArray27 operator |(LookupTritArray27Operator left, TritArray27 right)
    {
        left.builder.Build()(left.trits.Negative, left.trits.Positive, right.Negative, right.Positive, out var negative, out var positive);
        return new(negative, positive);
    }
    
    public static TritArray27 operator |(LookupTritArray27Operator left, Int27T right)
    {
        var tritArray = (TritArray27)right;
        left.builder.Build()(left.trits.Negative, left.trits.Positive, tritArray.Negative, tritArray.Positive, out var negative, out var positive);
        return new(negative, positive);
    }
       
    public static TritArray27 operator |(LookupTritArray27Operator left, Int32 right)
    {
        TritConverter.ConvertTo32Trits(right, out var rightNegative, out var rightPositive);
        left.builder.Build()(left.trits.Negative, left.trits.Positive, (UInt32)rightNegative, (UInt32)rightPositive, out var negative, out var positive);
        return new(negative, positive);
    }
   
    public static TritArray27 operator |(LookupTritArray27Operator left, Int64 right)
    {
        TritConverter.ConvertTo32Trits(right, out var rightNegative, out var rightPositive);
        left.builder.Build()(left.trits.Negative, left.trits.Positive, (UInt32)rightNegative, (UInt32)rightPositive, out var negative, out var positive);
        return new(negative, positive);
    }
}