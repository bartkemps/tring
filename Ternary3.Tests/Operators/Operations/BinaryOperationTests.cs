namespace Ternary3.Tests.Operators.Operations;

using FluentAssertions;
using Ternary3.Operators.Operations;

public class BinaryOperationTests
{
    [Theory]
    [InlineData(0, 0b0)]
    [InlineData(1, 0b1)]
    [InlineData(2, 0b10)]
    [InlineData(3, 0b11)]
    [InlineData(4, 0b100)]
    [InlineData(5, 0b101)]
    [InlineData(6, 0b110)]
    [InlineData(7, 0b111)]
    [InlineData(8, 0b1000)]
    [InlineData(9, 0b1001)]
    [InlineData(10, 0b1010)]
    [InlineData(11, 0b1011)]
    [InlineData(12, 0b1100)]
    [InlineData(13, 0b1101)]
    [InlineData(14, 0b1110)]
    [InlineData(15, 0b1111)]
    [InlineData(16, 0b10000)]
    [InlineData(17, 0b10001)]
    [InlineData(18, 0b10010)]
    [InlineData(19, 0b10011)]
    [InlineData(20, 0b10100)]
    [InlineData(21, 0b10101)]
    [InlineData(22, 0b10110)]
    [InlineData(23, 0b10111)]
    [InlineData(24, 0b11000)]
    [InlineData(25, 0b11001)]
    [InlineData(26, 0b11010)]
    [InlineData(27, 0b11011)]
    [InlineData(28, 0b11100)]
    [InlineData(29, 0b11101)]
    [InlineData(30, 0b11110)]
    [InlineData(31, 0b11111)]
    [InlineData(32, 0b100000)]
    [InlineData(33, 0b100001)]
    [InlineData(34, 0b100010)]
    [InlineData(35, 0b100011)]
    [InlineData(36, 0b100100)]
    [InlineData(37, 0b100101)]
    [InlineData(38, 0b100110)]
    [InlineData(39, 0b100111)]
    [InlineData(40, 0b101000)]
    [InlineData(41, 0b101001)]
    [InlineData(42, 0b101010)]
    [InlineData(43, 0b101011)]
    [InlineData(44, 0b101100)]
    [InlineData(45, 0b101101)]
    [InlineData(46, 0b101110)]
    [InlineData(47, 0b101111)]
    [InlineData(48, 0b110000)]
    [InlineData(49, 0b110001)]
    [InlineData(50, 0b110010)]
    [InlineData(51, 0b110011)]
    [InlineData(52, 0b110100)]
    [InlineData(53, 0b110101)]
    [InlineData(54, 0b110110)]
    [InlineData(55, 0b110111)]
    [InlineData(56, 0b111000)]
    [InlineData(57, 0b111001)]
    [InlineData(58, 0b111010)]
    [InlineData(59, 0b111011)]
    [InlineData(60, 0b111100)]
    [InlineData(61, 0b111101)]
    [InlineData(62, 0b111110)]
    [InlineData(63, 0b111111)]
    [InlineData(64, 0b1000000)]
    [InlineData(65, 0b1000001)]
    [InlineData(66, 0b1000010)]
    [InlineData(67, 0b1000011)]
    [InlineData(68, 0b1000100)]
    [InlineData(69, 0b1000101)]
    [InlineData(70, 0b1000110)]
    [InlineData(71, 0b1000111)]
    [InlineData(72, 0b1001000)]
    [InlineData(73, 0b1001001)]
    [InlineData(74, 0b1001010)]
    [InlineData(75, 0b1001011)]
    [InlineData(76, 0b1001100)]
    [InlineData(77, 0b1001101)]
    [InlineData(78, 0b1001110)]
    [InlineData(79, 0b1001111)]
    [InlineData(80, 0b1010000)]
    [InlineData(81, 0b1010001)]
    [InlineData(82, 0b1010010)]
    [InlineData(83, 0b1010011)]
    [InlineData(84, 0b1010100)]
    [InlineData(85, 0b1010101)]
    [InlineData(86, 0b1010110)]
    [InlineData(87, 0b1010111)]
    [InlineData(88, 0b1011000)]
    [InlineData(89, 0b1011001)]
    [InlineData(90, 0b1011010)]
    [InlineData(91, 0b1011011)]
    [InlineData(92, 0b1011100)]
    [InlineData(93, 0b1011101)]
    [InlineData(94, 0b1011110)]
    [InlineData(95, 0b1011111)]
    [InlineData(96, 0b1100000)]
    [InlineData(97, 0b1100001)]
    [InlineData(98, 0b1100010)]
    [InlineData(99, 0b1100011)]
    [InlineData(100, 0b1100100)]
    [InlineData(101, 0b1100101)]
    [InlineData(102, 0b1100110)]
    [InlineData(103, 0b1100111)]
    [InlineData(104, 0b1101000)]
    [InlineData(105, 0b1101001)]
    [InlineData(106, 0b1101010)]
    [InlineData(107, 0b1101011)]
    [InlineData(108, 0b1101100)]
    [InlineData(109, 0b1101101)]
    [InlineData(110, 0b1101110)]
    [InlineData(111, 0b1101111)]
    [InlineData(112, 0b1110000)]
    [InlineData(113, 0b1110001)]
    [InlineData(114, 0b1110010)]
    [InlineData(115, 0b1110011)]
    [InlineData(116, 0b1110100)]
    [InlineData(117, 0b1110101)]
    [InlineData(118, 0b1110110)]
    [InlineData(119, 0b1110111)]
    [InlineData(120, 0b1111000)]
    [InlineData(121, 0b1111001)]
    [InlineData(122, 0b1111010)]
    [InlineData(123, 0b1111011)]
    [InlineData(124, 0b1111100)]
    [InlineData(125, 0b1111101)]
    [InlineData(126, 0b1111110)]
    [InlineData(127, 0b1111111)]
    [InlineData(128, 0b10000000)]
    [InlineData(129, 0b10000001)]
    [InlineData(130, 0b10000010)]
    [InlineData(131, 0b10000011)]
    [InlineData(132, 0b10000100)]
    [InlineData(133, 0b10000101)]
    [InlineData(134, 0b10000110)]
    [InlineData(135, 0b10000111)]
    [InlineData(136, 0b10001000)]
    [InlineData(137, 0b10001001)]
    [InlineData(138, 0b10001010)]
    [InlineData(139, 0b10001011)]
    [InlineData(140, 0b10001100)]
    [InlineData(141, 0b10001101)]
    [InlineData(142, 0b10001110)]
    [InlineData(143, 0b10001111)]
    [InlineData(144, 0b10010000)]
    [InlineData(145, 0b10010001)]
    [InlineData(146, 0b10010010)]
    [InlineData(147, 0b10010011)]
    [InlineData(148, 0b10010100)]
    [InlineData(149, 0b10010101)]
    [InlineData(150, 0b10010110)]
    [InlineData(151, 0b10010111)]
    [InlineData(152, 0b10011000)]
    [InlineData(153, 0b10011001)]
    [InlineData(154, 0b10011010)]
    [InlineData(155, 0b10011011)]
    [InlineData(156, 0b10011100)]
    [InlineData(157, 0b10011101)]
    [InlineData(158, 0b10011110)]
    [InlineData(159, 0b10011111)]
    [InlineData(160, 0b10100000)]
    [InlineData(161, 0b10100001)]
    [InlineData(162, 0b10100010)]
    [InlineData(163, 0b10100011)]
    [InlineData(164, 0b10100100)]
    [InlineData(165, 0b10100101)]
    [InlineData(166, 0b10100110)]
    [InlineData(167, 0b10100111)]
    [InlineData(168, 0b10101000)]
    [InlineData(169, 0b10101001)]
    [InlineData(170, 0b10101010)]
    [InlineData(171, 0b10101011)]
    [InlineData(172, 0b10101100)]
    [InlineData(173, 0b10101101)]
    [InlineData(174, 0b10101110)]
    [InlineData(175, 0b10101111)]
    [InlineData(176, 0b10110000)]
    [InlineData(177, 0b10110001)]
    [InlineData(178, 0b10110010)]
    [InlineData(179, 0b10110011)]
    [InlineData(180, 0b10110100)]
    [InlineData(181, 0b10110101)]
    [InlineData(182, 0b10110110)]
    [InlineData(183, 0b10110111)]
    [InlineData(184, 0b10111000)]
    [InlineData(185, 0b10111001)]
    [InlineData(186, 0b10111010)]
    [InlineData(187, 0b10111011)]
    [InlineData(188, 0b10111100)]
    [InlineData(189, 0b10111101)]
    [InlineData(190, 0b10111110)]
    [InlineData(191, 0b10111111)]
    [InlineData(192, 0b11000000)]
    [InlineData(193, 0b11000001)]
    [InlineData(194, 0b11000010)]
    [InlineData(195, 0b11000011)]
    [InlineData(196, 0b11000100)]
    [InlineData(197, 0b11000101)]
    [InlineData(198, 0b11000110)]
    [InlineData(199, 0b11000111)]
    [InlineData(200, 0b11001000)]
    [InlineData(201, 0b11001001)]
    [InlineData(202, 0b11001010)]
    [InlineData(203, 0b11001011)]
    [InlineData(204, 0b11001100)]
    [InlineData(205, 0b11001101)]
    [InlineData(206, 0b11001110)]
    [InlineData(207, 0b11001111)]
    [InlineData(208, 0b11010000)]
    [InlineData(209, 0b11010001)]
    [InlineData(210, 0b11010010)]
    [InlineData(211, 0b11010011)]
    [InlineData(212, 0b11010100)]
    [InlineData(213, 0b11010101)]
    [InlineData(214, 0b11010110)]
    [InlineData(215, 0b11010111)]
    [InlineData(216, 0b11011000)]
    [InlineData(217, 0b11011001)]
    [InlineData(218, 0b11011010)]
    [InlineData(219, 0b11011011)]
    [InlineData(220, 0b11011100)]
    [InlineData(221, 0b11011101)]
    [InlineData(222, 0b11011110)]
    [InlineData(223, 0b11011111)]
    [InlineData(224, 0b11100000)]
    [InlineData(225, 0b11100001)]
    [InlineData(226, 0b11100010)]
    [InlineData(227, 0b11100011)]
    [InlineData(228, 0b11100100)]
    [InlineData(229, 0b11100101)]
    [InlineData(230, 0b11100110)]
    [InlineData(231, 0b11100111)]
    [InlineData(232, 0b11101000)]
    [InlineData(233, 0b11101001)]
    [InlineData(234, 0b11101010)]
    [InlineData(235, 0b11101011)]
    [InlineData(236, 0b11101100)]
    [InlineData(237, 0b11101101)]
    [InlineData(238, 0b11101110)]
    [InlineData(239, 0b11101111)]
    [InlineData(240, 0b11110000)]
    [InlineData(241, 0b11110001)]
    [InlineData(242, 0b11110010)]
    [InlineData(243, 0b11110011)]
    [InlineData(244, 0b11110100)]
    [InlineData(245, 0b11110101)]
    [InlineData(246, 0b11110110)]
    [InlineData(247, 0b11110111)]
    [InlineData(248, 0b11111000)]
    [InlineData(249, 0b11111001)]
    [InlineData(250, 0b11111010)]
    [InlineData(251, 0b11111011)]
    [InlineData(252, 0b11111100)]
    [InlineData(253, 0b11111101)]
    [InlineData(254, 0b11111110)]
    [InlineData(255, 0b11111111)]
    [InlineData(256, 0b100000000)]
    [InlineData(257, 0b100000001)]
    [InlineData(258, 0b100000010)]
    [InlineData(259, 0b100000011)]
    [InlineData(260, 0b100000100)]
    [InlineData(261, 0b100000101)]
    [InlineData(262, 0b100000110)]
    [InlineData(263, 0b100000111)]
    [InlineData(264, 0b100001000)]
    [InlineData(265, 0b100001001)]
    [InlineData(266, 0b100001010)]
    [InlineData(267, 0b100001011)]
    [InlineData(268, 0b100001100)]
    [InlineData(269, 0b100001101)]
    [InlineData(270, 0b100001110)]
    [InlineData(271, 0b100001111)]
    [InlineData(272, 0b100010000)]
    [InlineData(273, 0b100010001)]
    [InlineData(274, 0b100010010)]
    [InlineData(275, 0b100010011)]
    [InlineData(276, 0b100010100)]
    [InlineData(277, 0b100010101)]
    [InlineData(278, 0b100010110)]
    [InlineData(279, 0b100010111)]
    [InlineData(280, 0b100011000)]
    [InlineData(281, 0b100011001)]
    [InlineData(282, 0b100011010)]
    [InlineData(283, 0b100011011)]
    [InlineData(284, 0b100011100)]
    [InlineData(285, 0b100011101)]
    [InlineData(286, 0b100011110)]
    [InlineData(287, 0b100011111)]
    [InlineData(288, 0b100100000)]
    [InlineData(289, 0b100100001)]
    [InlineData(290, 0b100100010)]
    [InlineData(291, 0b100100011)]
    [InlineData(292, 0b100100100)]
    [InlineData(293, 0b100100101)]
    [InlineData(294, 0b100100110)]
    [InlineData(295, 0b100100111)]
    [InlineData(296, 0b100101000)]
    [InlineData(297, 0b100101001)]
    [InlineData(298, 0b100101010)]
    [InlineData(299, 0b100101011)]
    [InlineData(300, 0b100101100)]
    [InlineData(301, 0b100101101)]
    [InlineData(302, 0b100101110)]
    [InlineData(303, 0b100101111)]
    [InlineData(304, 0b100110000)]
    [InlineData(305, 0b100110001)]
    [InlineData(306, 0b100110010)]
    [InlineData(307, 0b100110011)]
    [InlineData(308, 0b100110100)]
    [InlineData(309, 0b100110101)]
    [InlineData(310, 0b100110110)]
    [InlineData(311, 0b100110111)]
    [InlineData(312, 0b100111000)]
    [InlineData(313, 0b100111001)]
    [InlineData(314, 0b100111010)]
    [InlineData(315, 0b100111011)]
    [InlineData(316, 0b100111100)]
    [InlineData(317, 0b100111101)]
    [InlineData(318, 0b100111110)]
    [InlineData(319, 0b100111111)]
    [InlineData(320, 0b101000000)]
    [InlineData(321, 0b101000001)]
    [InlineData(322, 0b101000010)]
    [InlineData(323, 0b101000011)]
    [InlineData(324, 0b101000100)]
    [InlineData(325, 0b101000101)]
    [InlineData(326, 0b101000110)]
    [InlineData(327, 0b101000111)]
    [InlineData(328, 0b101001000)]
    [InlineData(329, 0b101001001)]
    [InlineData(330, 0b101001010)]
    [InlineData(331, 0b101001011)]
    [InlineData(332, 0b101001100)]
    [InlineData(333, 0b101001101)]
    [InlineData(334, 0b101001110)]
    [InlineData(335, 0b101001111)]
    [InlineData(336, 0b101010000)]
    [InlineData(337, 0b101010001)]
    [InlineData(338, 0b101010010)]
    [InlineData(339, 0b101010011)]
    [InlineData(340, 0b101010100)]
    [InlineData(341, 0b101010101)]
    [InlineData(342, 0b101010110)]
    [InlineData(343, 0b101010111)]
    [InlineData(344, 0b101011000)]
    [InlineData(345, 0b101011001)]
    [InlineData(346, 0b101011010)]
    [InlineData(347, 0b101011011)]
    [InlineData(348, 0b101011100)]
    [InlineData(349, 0b101011101)]
    [InlineData(350, 0b101011110)]
    [InlineData(351, 0b101011111)]
    [InlineData(352, 0b101100000)]
    [InlineData(353, 0b101100001)]
    [InlineData(354, 0b101100010)]
    [InlineData(355, 0b101100011)]
    [InlineData(356, 0b101100100)]
    [InlineData(357, 0b101100101)]
    [InlineData(358, 0b101100110)]
    [InlineData(359, 0b101100111)]
    [InlineData(360, 0b101101000)]
    [InlineData(361, 0b101101001)]
    [InlineData(362, 0b101101010)]
    [InlineData(363, 0b101101011)]
    [InlineData(364, 0b101101100)]
    [InlineData(365, 0b101101101)]
    [InlineData(366, 0b101101110)]
    [InlineData(367, 0b101101111)]
    [InlineData(368, 0b101110000)]
    [InlineData(369, 0b101110001)]
    [InlineData(370, 0b101110010)]
    [InlineData(371, 0b101110011)]
    [InlineData(372, 0b101110100)]
    [InlineData(373, 0b101110101)]
    [InlineData(374, 0b101110110)]
    [InlineData(375, 0b101110111)]
    [InlineData(376, 0b101111000)]
    [InlineData(377, 0b101111001)]
    [InlineData(378, 0b101111010)]
    [InlineData(379, 0b101111011)]
    [InlineData(380, 0b101111100)]
    [InlineData(381, 0b101111101)]
    [InlineData(382, 0b101111110)]
    [InlineData(383, 0b101111111)]
    [InlineData(384, 0b110000000)]
    [InlineData(385, 0b110000001)]
    [InlineData(386, 0b110000010)]
    [InlineData(387, 0b110000011)]
    [InlineData(388, 0b110000100)]
    [InlineData(389, 0b110000101)]
    [InlineData(390, 0b110000110)]
    [InlineData(391, 0b110000111)]
    [InlineData(392, 0b110001000)]
    [InlineData(393, 0b110001001)]
    [InlineData(394, 0b110001010)]
    [InlineData(395, 0b110001011)]
    [InlineData(396, 0b110001100)]
    [InlineData(397, 0b110001101)]
    [InlineData(398, 0b110001110)]
    [InlineData(399, 0b110001111)]
    [InlineData(400, 0b110010000)]
    [InlineData(401, 0b110010001)]
    [InlineData(402, 0b110010010)]
    [InlineData(403, 0b110010011)]
    [InlineData(404, 0b110010100)]
    [InlineData(405, 0b110010101)]
    [InlineData(406, 0b110010110)]
    [InlineData(407, 0b110010111)]
    [InlineData(408, 0b110011000)]
    [InlineData(409, 0b110011001)]
    [InlineData(410, 0b110011010)]
    [InlineData(411, 0b110011011)]
    [InlineData(412, 0b110011100)]
    [InlineData(413, 0b110011101)]
    [InlineData(414, 0b110011110)]
    [InlineData(415, 0b110011111)]
    [InlineData(416, 0b110100000)]
    [InlineData(417, 0b110100001)]
    [InlineData(418, 0b110100010)]
    [InlineData(419, 0b110100011)]
    [InlineData(420, 0b110100100)]
    [InlineData(421, 0b110100101)]
    [InlineData(422, 0b110100110)]
    [InlineData(423, 0b110100111)]
    [InlineData(424, 0b110101000)]
    [InlineData(425, 0b110101001)]
    [InlineData(426, 0b110101010)]
    [InlineData(427, 0b110101011)]
    [InlineData(428, 0b110101100)]
    [InlineData(429, 0b110101101)]
    [InlineData(430, 0b110101110)]
    [InlineData(431, 0b110101111)]
    [InlineData(432, 0b110110000)]
    [InlineData(433, 0b110110001)]
    [InlineData(434, 0b110110010)]
    [InlineData(435, 0b110110011)]
    [InlineData(436, 0b110110100)]
    [InlineData(437, 0b110110101)]
    [InlineData(438, 0b110110110)]
    [InlineData(439, 0b110110111)]
    [InlineData(440, 0b110111000)]
    [InlineData(441, 0b110111001)]
    [InlineData(442, 0b110111010)]
    [InlineData(443, 0b110111011)]
    [InlineData(444, 0b110111100)]
    [InlineData(445, 0b110111101)]
    [InlineData(446, 0b110111110)]
    [InlineData(447, 0b110111111)]
    [InlineData(448, 0b111000000)]
    [InlineData(449, 0b111000001)]
    [InlineData(450, 0b111000010)]
    [InlineData(451, 0b111000011)]
    [InlineData(452, 0b111000100)]
    [InlineData(453, 0b111000101)]
    [InlineData(454, 0b111000110)]
    [InlineData(455, 0b111000111)]
    [InlineData(456, 0b111001000)]
    [InlineData(457, 0b111001001)]
    [InlineData(458, 0b111001010)]
    [InlineData(459, 0b111001011)]
    [InlineData(460, 0b111001100)]
    [InlineData(461, 0b111001101)]
    [InlineData(462, 0b111001110)]
    [InlineData(463, 0b111001111)]
    [InlineData(464, 0b111010000)]
    [InlineData(465, 0b111010001)]
    [InlineData(466, 0b111010010)]
    [InlineData(467, 0b111010011)]
    [InlineData(468, 0b111010100)]
    [InlineData(469, 0b111010101)]
    [InlineData(470, 0b111010110)]
    [InlineData(471, 0b111010111)]
    [InlineData(472, 0b111011000)]
    [InlineData(473, 0b111011001)]
    [InlineData(474, 0b111011010)]
    [InlineData(475, 0b111011011)]
    [InlineData(476, 0b111011100)]
    [InlineData(477, 0b111011101)]
    [InlineData(478, 0b111011110)]
    [InlineData(479, 0b111011111)]
    [InlineData(480, 0b111100000)]
    [InlineData(481, 0b111100001)]
    [InlineData(482, 0b111100010)]
    [InlineData(483, 0b111100011)]
    [InlineData(484, 0b111100100)]
    [InlineData(485, 0b111100101)]
    [InlineData(486, 0b111100110)]
    [InlineData(487, 0b111100111)]
    [InlineData(488, 0b111101000)]
    [InlineData(489, 0b111101001)]
    [InlineData(490, 0b111101010)]
    [InlineData(491, 0b111101011)]
    [InlineData(492, 0b111101100)]
    [InlineData(493, 0b111101101)]
    [InlineData(494, 0b111101110)]
    [InlineData(495, 0b111101111)]
    [InlineData(496, 0b111110000)]
    [InlineData(497, 0b111110001)]
    [InlineData(498, 0b111110010)]
    [InlineData(499, 0b111110011)]
    [InlineData(500, 0b111110100)]
    [InlineData(501, 0b111110101)]
    [InlineData(502, 0b111110110)]
    [InlineData(503, 0b111110111)]
    [InlineData(504, 0b111111000)]
    [InlineData(505, 0b111111001)]
    [InlineData(506, 0b111111010)]
    [InlineData(507, 0b111111011)]
    [InlineData(508, 0b111111100)]
    [InlineData(509, 0b111111101)]
    [InlineData(510, 0b111111110)]
    [InlineData(511, 0b111111111)]
    public void GetTrits_ReturnsCorrectResult_ForSpecifiedBitPatterns(int index, int expected)
    {
        // magic combination of inputs that
        // - uses all occuring combiniations (both n and p cannot be 1)
        // - forces the result to be equal to the input (index)
        const ushort n1 = 0b000000111;
        const ushort p1 = 0b111000000;
        const ushort n2 = 0b001001001;
        const ushort p2 = 0b100100100;

        var actual = BinaryOperation.GetTrits(index, n1, p1, n2, p2) & 0b111111111;

        actual.Should().Be(expected, $"because operation index {index} should produce the expected result");
    }
}