// <auto-generated />
namespace Tring.Operators;

using System;
using Numbers;
internal partial class UnaryOperation
{

    private static readonly Func<UInt32, UInt32, UInt32Pair>[] operations32 =
    [
        Negative, Decrement, IsPositive,
        NegateAbsoluteValue, Ceil, Identity,
        IsZero, KeepNegative, IsNotNegative,
        CeilIsNegative, CeilIsNotZero, KeepPositive,
        CeilIsNotPositive, Zero, Floor,
        CyclicIncrement, FloorIsZero, Increment,
        IsNegative, CyclicDecrement, IsNotZero,
        Negate, FloorIsNegative, AbsoluteValue,
        IsNotPositive, FloorIsNotPositive, Positive
    ];

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    internal static UInt32Pair Apply(UInt32 negative, UInt32 positive, Func<UInt32, UInt32, UInt32Pair> operation) => operation(negative, positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair Negative(UInt32 negative, UInt32 positive) => new (UInt32.MaxValue, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair Decrement(UInt32 negative, UInt32 positive) => new (negative | ~positive, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair IsPositive(UInt32 negative, UInt32 positive) => new (negative | ~positive, positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair NegateAbsoluteValue(UInt32 negative, UInt32 positive) => new (negative | positive, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair Ceil(UInt32 negative, UInt32 positive) => new (negative, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair Identity(UInt32 negative, UInt32 positive) => new (negative, positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair IsZero(UInt32 negative, UInt32 positive) => new (negative | positive, ~negative & ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair KeepNegative(UInt32 negative, UInt32 positive) => new (negative, ~negative & ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair IsNotNegative(UInt32 negative, UInt32 positive) => new (negative, ~negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair CeilIsNegative(UInt32 negative, UInt32 positive) => new (~negative, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair CeilIsNotZero(UInt32 negative, UInt32 positive) => new (~positive & ~negative, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair KeepPositive(UInt32 negative, UInt32 positive) => new (~positive & ~negative, positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair CeilIsNotPositive(UInt32 negative, UInt32 positive) => new (positive, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair Zero(UInt32 negative, UInt32 positive) => new (0, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair Floor(UInt32 negative, UInt32 positive) => new (0, positive & ~negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair CyclicIncrement(UInt32 negative, UInt32 positive) => new (positive, ~negative & ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair FloorIsZero(UInt32 negative, UInt32 positive) => new (0, ~positive & ~negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair Increment(UInt32 negative, UInt32 positive) => new (0, positive | ~negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair IsNegative(UInt32 negative, UInt32 positive) => new (~negative, negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair CyclicDecrement(UInt32 negative, UInt32 positive) => new (~positive & ~negative, negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair IsNotZero(UInt32 negative, UInt32 positive) => new (~negative & ~positive, negative | positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair Negate(UInt32 negative, UInt32 positive) => new (positive, negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair FloorIsNegative(UInt32 negative, UInt32 positive) => new (0, negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair AbsoluteValue(UInt32 negative, UInt32 positive) => new (0, positive | negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair IsNotPositive(UInt32 negative, UInt32 positive) => new (positive, ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair FloorIsNotPositive(UInt32 negative, UInt32 positive) => new (0, ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt32Pair Positive(UInt32 negative, UInt32 positive) => new (0, UInt32.MaxValue);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    internal static UInt32Pair Apply(UInt32 negative, UInt32 positive, Func<Trit, Trit> operation)
    {
        return operations32[13 + operation(Trit.Positive).Value + 3 * operation(Trit.Zero).Value + 9 * operation(Trit.Negative).Value](negative, positive);
    }
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    internal static UInt32Pair Apply(UInt32 negative, UInt32 positive, Trit[] table)
    {
        if (table.Length != 3) throw new ArgumentException("Table must have exactly 3 elements.", nameof(table));
        return operations32[13 + table[2].Value + 3 * table[1].Value + 9 * table[0].Value](negative, positive);
    }

    private static readonly Func<UInt64, UInt64, UInt64Pair>[] operations64 =
    [
        Negative, Decrement, IsPositive,
        NegateAbsoluteValue, Ceil, Identity,
        IsZero, KeepNegative, IsNotNegative,
        CeilIsNegative, CeilIsNotZero, KeepPositive,
        CeilIsNotPositive, Zero, Floor,
        CyclicIncrement, FloorIsZero, Increment,
        IsNegative, CyclicDecrement, IsNotZero,
        Negate, FloorIsNegative, AbsoluteValue,
        IsNotPositive, FloorIsNotPositive, Positive
    ];

    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    internal static UInt64Pair Apply(UInt64 negative, UInt64 positive, Func<UInt64, UInt64, UInt64Pair> operation) => operation(negative, positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair Negative(UInt64 negative, UInt64 positive) => new (UInt64.MaxValue, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair Decrement(UInt64 negative, UInt64 positive) => new (negative | ~positive, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair IsPositive(UInt64 negative, UInt64 positive) => new (negative | ~positive, positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair NegateAbsoluteValue(UInt64 negative, UInt64 positive) => new (negative | positive, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair Ceil(UInt64 negative, UInt64 positive) => new (negative, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair Identity(UInt64 negative, UInt64 positive) => new (negative, positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair IsZero(UInt64 negative, UInt64 positive) => new (negative | positive, ~negative & ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair KeepNegative(UInt64 negative, UInt64 positive) => new (negative, ~negative & ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair IsNotNegative(UInt64 negative, UInt64 positive) => new (negative, ~negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair CeilIsNegative(UInt64 negative, UInt64 positive) => new (~negative, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair CeilIsNotZero(UInt64 negative, UInt64 positive) => new (~positive & ~negative, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair KeepPositive(UInt64 negative, UInt64 positive) => new (~positive & ~negative, positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair CeilIsNotPositive(UInt64 negative, UInt64 positive) => new (positive, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair Zero(UInt64 negative, UInt64 positive) => new (0, 0);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair Floor(UInt64 negative, UInt64 positive) => new (0, positive & ~negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair CyclicIncrement(UInt64 negative, UInt64 positive) => new (positive, ~negative & ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair FloorIsZero(UInt64 negative, UInt64 positive) => new (0, ~positive & ~negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair Increment(UInt64 negative, UInt64 positive) => new (0, positive | ~negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair IsNegative(UInt64 negative, UInt64 positive) => new (~negative, negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair CyclicDecrement(UInt64 negative, UInt64 positive) => new (~positive & ~negative, negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair IsNotZero(UInt64 negative, UInt64 positive) => new (~negative & ~positive, negative | positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair Negate(UInt64 negative, UInt64 positive) => new (positive, negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair FloorIsNegative(UInt64 negative, UInt64 positive) => new (0, negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair AbsoluteValue(UInt64 negative, UInt64 positive) => new (0, positive | negative);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair IsNotPositive(UInt64 negative, UInt64 positive) => new (positive, ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair FloorIsNotPositive(UInt64 negative, UInt64 positive) => new (0, ~positive);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    private static UInt64Pair Positive(UInt64 negative, UInt64 positive) => new (0, UInt64.MaxValue);
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    internal static UInt64Pair Apply(UInt64 negative, UInt64 positive, Func<Trit, Trit> operation)
    {
        return operations64[13 + operation(Trit.Positive).Value + 3 * operation(Trit.Zero).Value + 9 * operation(Trit.Negative).Value](negative, positive);
    }
    [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    internal static UInt64Pair Apply(UInt64 negative, UInt64 positive, Trit[] table)
    {
        if (table.Length != 3) throw new ArgumentException("Table must have exactly 3 elements.", nameof(table));
        return operations64[13 + table[2].Value + 3 * table[1].Value + 9 * table[0].Value](negative, positive);
    }
}
