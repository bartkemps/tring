// <auto-generated />
// ReSharper disable CompareOfFloatsByEqualityOperator
// ReSharper disable IntVariableOverflowInUncheckedContext
// ReSharper disable SuspiciousTypeConversion.Global
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable ConvertIfStatementToSwitchStatement
// ReSharper disable BuiltInTypeReferenceStyle

namespace Tring.Numbers;

using Operators;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Numerics;
using System.Diagnostics.CodeAnalysis;

/// <summary>
/// Represents a 5-trit  signed integer, modeled after the <see cref="SByte"/> type.
/// </summary>
[GeneratedCode("IntT.tt", null)]
public readonly partial struct Int5T : ITernaryInteger<Int5T>
{
    private readonly SByte value;

    /// <summary>
    ///  Represents the maximum value of a <see cref="Int5T"/>, expressed as a <see cref="SByte"/> This field is constant.
    /// </summary>
    public const SByte MaxValueConstant = 121;

    /// <summary>
    /// Represents the minimum value of a <see cref="Int5T"/>, expressed as a <see cref="SByte"/> This field is constant.
    /// </summary>
    public const SByte MinValueConstant = -121;

    /// <summary>
    /// Represents the largest possible value of a <see cref="Int5T"/>. This field is constant.
    /// </summary>
    public static readonly Int5T MaxValue = new(MaxValueConstant);

    /// <summary>
    /// Represents the smallest possible value of a <see cref="Int5T"/>. This field is constant.
    /// </summary>
    public static readonly Int5T MinValue = new(MinValueConstant);

    private Int5T(SByte value) => this.value = value;
    
     private static Int5T Create(SByte value) => new((SByte)((Int32)value).BalancedModulo((Int32)MaxValueConstant));
     private static Int5T Create(Int32 value) => new((SByte)(value.BalancedModulo((Int32)MaxValueConstant)));
     private static Int5T Create(Int64 value) => new((SByte)(value.BalancedModulo((Int64)MaxValueConstant)));
     private static Int5T Create(Int128 value) => new((SByte)value.BalancedModulo((Int64)MaxValueConstant));

     /// <summary>
/// Defines an implicit conversion of a SByte to a <see cref="Int5T"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int5T"/> that represents the converted value.</returns>
public static implicit operator Int5T(SByte value) => Create(value);
     /// <summary>
/// Defines an implicit conversion of a Int5T to a <see cref="SByte"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="SByte"/> that represents the converted value.</returns>
public static implicit operator SByte(Int5T value) => (SByte)value.value;
     /// <summary>
/// Defines an explicit conversion of a Int32 to a <see cref="Int5T"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int5T"/> that represents the converted value.</returns>
public static explicit operator Int5T(Int32 value) => Create(value);
     /// <summary>
/// Defines an implicit conversion of a Int5T to a <see cref="Int32"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int32"/> that represents the converted value.</returns>
public static implicit operator Int32(Int5T value) => (Int32)value.value;
     /// <summary>
/// Defines an explicit conversion of a Int64 to a <see cref="Int5T"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int5T"/> that represents the converted value.</returns>
public static explicit operator Int5T(Int64 value) => Create(value);
     /// <summary>
/// Defines an implicit conversion of a Int5T to a <see cref="Int64"/>.
/// </summary>
/// <param name="value">The value to convert.</param>
/// <returns>A <see cref="Int64"/> that represents the converted value.</returns>
public static implicit operator Int64(Int5T value) => (Int64)value.value;

    /// <summary>
    /// Returns a value indicating whether this instance is equal to a specified object.
    /// </summary>
    /// <param name="obj">An object to compare with this instance.</param>
    /// <returns>
    /// <see langword="true"/> if <paramref name="obj"/> is an instance of <see cref="Int5T"/> or a compatible numeric type
    /// and equals the value of this instance; otherwise, <see langword="false"/>.
    /// </returns>
    public override bool Equals(object? obj)
    {
        switch (obj)
        {
            case null: return false;
            case Int5T other: return value == other.value;
            case int typed: return value == typed;
            case long int64: return value == int64;
            case short int16: return value == int16;
            case byte byteVal: return value == byteVal;
            case sbyte sbyteVal: return value == sbyteVal;
            case uint uint32: return value == uint32;
            case ulong uint64: return value == (SByte)uint64;
            case ushort uint16: return value == uint16;
            case float singleValue: return singleValue.Equals(value);
            case double doubleValue: return doubleValue.Equals(value);
            case decimal decimalValue: return decimalValue.Equals(value);
            case char charVal: return value == charVal;
            case IConvertible conv:
                try
                {
                    // ReSharper disable once SwitchStatementHandlesSomeKnownEnumValuesWithDefault
                    switch (conv.GetTypeCode())
                    {
                        case TypeCode.Int16: return value == conv.ToInt16(null);
                        case TypeCode.UInt16: return value == conv.ToUInt16(null);
                        case TypeCode.Int32: return value == conv.ToInt32(null);
                        case TypeCode.UInt32: return value == conv.ToUInt32(null);
                        case TypeCode.Int64: return value == conv.ToInt64(null);
                        case TypeCode.UInt64: return value == (SByte)conv.ToUInt64(null);
                        case TypeCode.Byte: return value == conv.ToByte(null);
                        case TypeCode.SByte: return value == conv.ToSByte(null);
                        case TypeCode.Single: return conv.ToSingle(null).Equals(value);
                        case TypeCode.Double: return conv.ToDouble(null).Equals(value);
                        case TypeCode.Decimal: return conv.ToDecimal(null).Equals(value);
                    }
                }
                catch
                {
                    return false;
                }

                break;
        }

        return obj.Equals(value);
    }

    /// <summary>
    /// Returns a value indicating whether this instance is equal to a specified <see cref="Int5T"/> value.
    /// </summary>
    /// <param name="other">A <see cref="Int5T"/> value to compare to this instance.</param>
    /// <returns><see langword="true"/> if <paramref name="other"/> has the same value as this instance; otherwise, <see langword="false"/>.</returns>
    public bool Equals(Int5T other) => value == other.value;

    /// <summary>
    /// Returns a value indicating whether this instance is equal to a specified <see cref="SByte"/> value.
    /// </summary>
    /// <param name="other">A <see cref="SByte"/> value to compare to this instance.</param>
    /// <returns><see langword="true"/> if <paramref name="other"/> has the same value as this instance; otherwise, <see langword="false"/>.</returns>
    public bool Equals(SByte other) => value == other;

    /// <summary>
    /// Returns the hash code for this instance.
    /// </summary>
    /// <returns>A 32-bit signed integer hash code.</returns>
    public override int GetHashCode() => value.GetHashCode();

    #region Equality Operators

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int5T"/> instances are equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator ==(IConvertible left, Int5T right) => right.Equals(left);

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int5T"/> instances are not equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator !=(IConvertible left, Int5T right) => !right.Equals(left);

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int5T"/> instances are equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator ==(Int5T left, IConvertible right) => left.Equals(right);

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int5T"/> instances are not equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator !=(Int5T left, IConvertible right) => !left.Equals(right);

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int5T"/> instances are equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator ==(Int5T left, Int5T right) => left.value == right.value;

    /// <summary>
    /// Returns a value indicating whether two <see cref="Int5T"/> instances are not equal.
    /// </summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><see langword="true"/> if the values of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <see langword="false"/>.</returns>
    public static bool operator !=(Int5T left, Int5T right) => left.value != right.value;

    #endregion

    #region Arithmetic Operators
    
    public static Int5T operator +(Int5T left, Int5T right) => Create(left.value + right.value);
    public static Int5T operator -(Int5T left, Int5T right) => Create(left.value - right.value);
    public static Int5T operator *(Int5T left, Int5T right) => Create(left.value * right.value);
    public static Int5T operator /(Int5T left, Int5T right) => Create(left.value / right.value);
    public static Int5T operator %(Int5T left, Int5T right) => Create(left.value % right.value);
    public static Int5T operator -(Int5T value) => Create(-value.value);
    public static Int5T operator +(Int5T value) => value;
    public static Int5T operator +(Int5T left, SByte right) => Create(left.value + right);
    public static Int5T operator +(SByte left, Int5T right) => Create(left + right.value);
    public static Int5T operator -(Int5T left, SByte right) => Create(left.value - right);
    public static Int5T operator -(SByte left, Int5T right) => Create(left - right.value);
    public static Int5T operator *(Int5T left, SByte right) => Create(left.value * right);
    public static Int5T operator *(SByte left, Int5T right) => Create(left * right.value);
    public static Int5T operator /(Int5T left, SByte right) => Create(left.value / right);
    public static Int5T operator /(SByte left, Int5T right) => Create(left / right.value);
    public static Int5T operator %(Int5T left, SByte right) => Create(left.value % right);
    public static Int5T operator %(SByte left, Int5T right) => Create(left % right.value);
    #endregion
    
    #region Comparison Operators

    // Comparison operators with Int5T
    public static bool operator >(Int5T left, Int5T right) => left.value > right.value;
    public static bool operator <(Int5T left, Int5T right) => left.value < right.value;
    public static bool operator >=(Int5T left, Int5T right) => left.value >= right.value;
    public static bool operator <=(Int5T left, Int5T right) => left.value <= right.value;
    
    // Comparison operators with sbyte
    public static bool operator >(Int5T left, sbyte right) => left.value > right;
    public static bool operator <(Int5T left, sbyte right) => left.value < right;
    public static bool operator >=(Int5T left, sbyte right) => left.value >= right;
    public static bool operator <=(Int5T left, sbyte right) => left.value <= right;

    public static bool operator >(sbyte left, Int5T right) => left > right.value;
    public static bool operator <(sbyte left, Int5T right) => left < right.value;
    public static bool operator >=(sbyte left, Int5T right) => left >= right.value;
    public static bool operator <=(sbyte left, Int5T right) => left <= right.value;
    
    // Comparison operators with byte
    public static bool operator >(Int5T left, byte right) => left.value > right;
    public static bool operator <(Int5T left, byte right) => left.value < right;
    public static bool operator >=(Int5T left, byte right) => left.value >= right;
    public static bool operator <=(Int5T left, byte right) => left.value <= right;

    public static bool operator >(byte left, Int5T right) => left > right.value;
    public static bool operator <(byte left, Int5T right) => left < right.value;
    public static bool operator >=(byte left, Int5T right) => left >= right.value;
    public static bool operator <=(byte left, Int5T right) => left <= right.value;
    
    // Comparison operators with int
    public static bool operator >(Int5T left, int right) => left.value > right;
    public static bool operator <(Int5T left, int right) => left.value < right;
    public static bool operator >=(Int5T left, int right) => left.value >= right;
    public static bool operator <=(Int5T left, int right) => left.value <= right;

    public static bool operator >(int left, Int5T right) => left > right.value;
    public static bool operator <(int left, Int5T right) => left < right.value;
    public static bool operator >=(int left, Int5T right) => left >= right.value;
    public static bool operator <=(int left, Int5T right) => left <= right.value;
    
    // Comparison operators with uint
    public static bool operator >(Int5T left, uint right) => left.value > right;
    public static bool operator <(Int5T left, uint right) => left.value < right;
    public static bool operator >=(Int5T left, uint right) => left.value >= right;
    public static bool operator <=(Int5T left, uint right) => left.value <= right;

    public static bool operator >(uint left, Int5T right) => left > right.value;
    public static bool operator <(uint left, Int5T right) => left < right.value;
    public static bool operator >=(uint left, Int5T right) => left >= right.value;
    public static bool operator <=(uint left, Int5T right) => left <= right.value;
    
    // Comparison operators with short
    public static bool operator >(Int5T left, short right) => left.value > right;
    public static bool operator <(Int5T left, short right) => left.value < right;
    public static bool operator >=(Int5T left, short right) => left.value >= right;
    public static bool operator <=(Int5T left, short right) => left.value <= right;

    public static bool operator >(short left, Int5T right) => left > right.value;
    public static bool operator <(short left, Int5T right) => left < right.value;
    public static bool operator >=(short left, Int5T right) => left >= right.value;
    public static bool operator <=(short left, Int5T right) => left <= right.value;
    
    // Comparison operators with ushort
    public static bool operator >(Int5T left, ushort right) => left.value > right;
    public static bool operator <(Int5T left, ushort right) => left.value < right;
    public static bool operator >=(Int5T left, ushort right) => left.value >= right;
    public static bool operator <=(Int5T left, ushort right) => left.value <= right;

    public static bool operator >(ushort left, Int5T right) => left > right.value;
    public static bool operator <(ushort left, Int5T right) => left < right.value;
    public static bool operator >=(ushort left, Int5T right) => left >= right.value;
    public static bool operator <=(ushort left, Int5T right) => left <= right.value;
    
    // Comparison operators with long
    public static bool operator >(Int5T left, long right) => left.value > right;
    public static bool operator <(Int5T left, long right) => left.value < right;
    public static bool operator >=(Int5T left, long right) => left.value >= right;
    public static bool operator <=(Int5T left, long right) => left.value <= right;

    public static bool operator >(long left, Int5T right) => left > right.value;
    public static bool operator <(long left, Int5T right) => left < right.value;
    public static bool operator >=(long left, Int5T right) => left >= right.value;
    public static bool operator <=(long left, Int5T right) => left <= right.value;
    
    // Comparison operators with ulong
    public static bool operator >(Int5T left, ulong right) => left.CompareTo(right) > 0;
    public static bool operator <(Int5T left, ulong right) => left.CompareTo(right) < 0;
    public static bool operator >=(Int5T left, ulong right) => left.CompareTo(right) >= 0;
    public static bool operator <=(Int5T left, ulong right) => left.CompareTo(right) <= 0;

    public static bool operator >(ulong left, Int5T right) => right.CompareTo(left) < 0;
    public static bool operator <(ulong left, Int5T right) => right.CompareTo(left) > 0;
    public static bool operator >=(ulong left, Int5T right) => right.CompareTo(left) <= 0;
    public static bool operator <=(ulong left, Int5T right) => right.CompareTo(left) >= 0;
     
    // Comparison operators with float
    public static bool operator >(Int5T left, float right) => left.value > right;
    public static bool operator <(Int5T left, float right) => left.value < right;
    public static bool operator >=(Int5T left, float right) => left.value >= right;
    public static bool operator <=(Int5T left, float right) => left.value <= right;

    public static bool operator >(float left, Int5T right) => left > right.value;
    public static bool operator <(float left, Int5T right) => left < right.value;
    public static bool operator >=(float left, Int5T right) => left >= right.value;
    public static bool operator <=(float left, Int5T right) => left <= right.value;
     
    // Comparison operators with double
    public static bool operator >(Int5T left, double right) => left.value > right;
    public static bool operator <(Int5T left, double right) => left.value < right;
    public static bool operator >=(Int5T left, double right) => left.value >= right;
    public static bool operator <=(Int5T left, double right) => left.value <= right;

    public static bool operator >(double left, Int5T right) => left > right.value;
    public static bool operator <(double left, Int5T right) => left < right.value;
    public static bool operator >=(double left, Int5T right) => left >= right.value;
    public static bool operator <=(double left, Int5T right) => left <= right.value;
     
    // Comparison operators with decimal
    public static bool operator >(Int5T left, decimal right) => left.value > right;
    public static bool operator <(Int5T left, decimal right) => left.value < right;
    public static bool operator >=(Int5T left, decimal right) => left.value >= right;
    public static bool operator <=(Int5T left, decimal right) => left.value <= right;

    public static bool operator >(decimal left, Int5T right) => left > right.value;
    public static bool operator <(decimal left, Int5T right) => left < right.value;
    public static bool operator >=(decimal left, Int5T right) => left >= right.value;
    public static bool operator <=(decimal left, Int5T right) => left <= right.value;
     
    // Comparison operators with IComparable
    public static bool operator >(Int5T left, IComparable right) => left.CompareTo(right) > 0;
    public static bool operator <(Int5T left, IComparable right) => left.CompareTo(right) < 0;
    public static bool operator >=(Int5T left, IComparable right) => left.CompareTo(right) >= 0;
    public static bool operator <=(Int5T left, IComparable right) => left.CompareTo(right) <= 0;

    public static bool operator >(IComparable left, Int5T right) => right.CompareTo(left) < 0;
    public static bool operator <(IComparable left, Int5T right) => right.CompareTo(left) > 0;
    public static bool operator >=(IComparable left, Int5T right) => right.CompareTo(left) <= 0;
    public static bool operator <=(IComparable left, Int5T right) => right.CompareTo(left) >= 0;

    #endregion

    // ToString implementation
    public override string ToString() => value.ToString();
    public string ToString(string? format) => value.ToString(format);
    public string ToString(IFormatProvider? provider) => value.ToString(provider);
    public string ToString(string? format, IFormatProvider? provider) => value.ToString(format, provider);

    // Parsing methods

    /// <summary>
    /// Converts the string representation of a number to its <see cref="Int5T"/> equivalent.
    /// </summary>
    /// <param name="s">A string containing a number to convert.</param>
    /// <returns>A <see cref="Int5T"/> equivalent to the number contained in <paramref name="s"/>.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
    /// <exception cref="FormatException"><paramref name="s"/> is not in the correct format.</exception>
    /// <exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="Int5T.MinValue"/> or greater than <see cref="Int5T.MaxValue"/>.</exception>
    public static Int5T Parse(string s) => Create(SByte.Parse(s));

    /// <summary>
    /// Converts the string representation of a number in a specified style to its <see cref="Int5T"/> equivalent.
    /// </summary>
    /// <param name="s">A string containing a number to convert.</param>
    /// <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s"/>.</param>
    /// <returns>A <see cref="Int5T"/> equivalent to the number contained in <paramref name="s"/>.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="s"/> is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentException"><paramref name="style"/> is not a <see cref="NumberStyles"/> value or <paramref name="style"/> includes the <see cref="NumberStyles.AllowHexSpecifier"/> value.</exception>
    /// <exception cref="FormatException"><paramref name="s"/> is not in a format compliant with <paramref name="style"/>.</exception>
    /// <exception cref="OverflowException"><paramref name="s"/> represents a number less than <see cref="Int5T.MinValue"/> or greater than <see cref="Int5T.MaxValue"/>.</exception>
    public static Int5T Parse(string s, NumberStyles style) => Create(SByte.Parse(s, style));

    /// <summary>
    /// Tries to convert the string representation of a number to its <see cref="Int5T"/> equivalent, and returns a value that indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="s">A string containing a number to convert.</param>
    /// <param name="result">When this method returns, contains the <see cref="Int5T"/> value equivalent to the number contained in <paramref name="s"/> if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
    /// <returns><see langword="true"/> if <paramref name="s"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
    public static bool TryParse(string? s, out Int5T result)
    {
        bool success = SByte.TryParse(s, out SByte value);
        result = new Int5T(value);
        return success;
    }

    /// <summary>
    /// Compares this instance to a specified object and returns an indication of their relative values.
    /// </summary>
    /// <param name="obj">An object to compare, or <see langword="null"/>.</param>
    /// <returns>
    /// A signed number indicating the relative values of this instance and <paramref name="obj"/>.
    /// Return Value Description:
    /// Less than zero: This instance is less than <paramref name="obj"/>.
    /// Zero: This instance is equal to <paramref name="obj"/>.
    /// Greater than zero: This instance is greater than <paramref name="obj"/> or <paramref name="obj"/> is <see langword="null"/>.
    /// </returns>
    /// <exception cref="ArgumentException"><paramref name="obj"/> is not a <see cref="Int5T"/> or a type that can be converted to an integer.</exception>
    public int CompareTo(object? obj)
    {
        if (obj == null) return 1;
        if (obj is Int5T other) return CompareTo(other);

        // For large numeric types that exceed Int5T's range, return -1 if greater than MaxValue, 1 if less than MinValue
        try
        {
            if (obj is SByte typed) return value.CompareTo(typed);
            if (obj is long int64)
            {
                return int64 switch
                {
                    > MaxValueConstant => -1,
                    < MinValueConstant => 1,
                    _ => value.CompareTo((SByte)int64)
                };
            }

            if (obj is uint uint32)
            {
                return uint32 > MaxValueConstant ? -1 : value.CompareTo((SByte)uint32);
            }

            if (obj is ulong uint64)
            {
                return uint64 > (long)MaxValueConstant ? -1 : value.CompareTo((SByte)uint64);
            }

            if (obj is short int16) return value.CompareTo(int16);
            if (obj is ushort uint16) return value.CompareTo(uint16);
            if (obj is byte byteVal) return value.CompareTo(byteVal);
            if (obj is sbyte sbyteVal) return value.CompareTo(sbyteVal);
            if (obj is float singleValue)
            {
                return singleValue switch
                {
                    > MaxValueConstant => -1,
                    < MinValueConstant => 1,
                    _ => value.CompareTo((SByte)singleValue)
                };
            }

            if (obj is double doubleValue)
            {
                return doubleValue switch
                {
                    > MaxValueConstant => -1,
                    < MinValueConstant => 1,
                    _ => value.CompareTo((SByte)doubleValue)
                };
            }

            if (obj is decimal decimalValue)
            {
                return decimalValue switch
                {
                    > MaxValueConstant => -1,
                    < MinValueConstant => 1,
                    _ => value.CompareTo((SByte)decimalValue)
                };
            }

            if (obj is IConvertible convertible)
            {
                switch (convertible.GetTypeCode())
                {
                    case TypeCode.Int16:
                    case TypeCode.UInt16:
                    case TypeCode.Byte:
                    case TypeCode.SByte:
                        return value.CompareTo(convertible.ToInt32(null));
                    case TypeCode.Int32:
                        return value.CompareTo(convertible.ToInt32(null));
                    case TypeCode.UInt32:
                        var uint32Value = convertible.ToUInt32(null);
                        if (uint32Value > MaxValueConstant) return -1;
                        return value.CompareTo((SByte)uint32Value);
                    case TypeCode.Int64:
                        var int64Value = convertible.ToInt64(null);
                        if (int64Value > MaxValueConstant) return -1;
                        if (int64Value < MinValueConstant) return 1;
                        return value.CompareTo((SByte)(int64Value));
                    case TypeCode.UInt64:
                        var uint64Value = convertible.ToUInt64(null);
                        if (uint64Value > (long)MaxValueConstant) return -1;
                        return value.CompareTo((SByte)uint64Value);
                    case TypeCode.Single:
                        var singleVal = convertible.ToSingle(null);
                        if (singleVal > MaxValueConstant) return -1;
                        if (singleVal < MinValueConstant) return 1;
                        return value.CompareTo((SByte)singleVal);
                    case TypeCode.Double:
                        var doubleVal = convertible.ToDouble(null);
                        if (doubleVal > MaxValueConstant) return -1;
                        if (doubleVal < MinValueConstant) return 1;
                        return value.CompareTo((SByte)doubleVal);
                    case TypeCode.Decimal:
                        var decimalVal = convertible.ToDecimal(null);
                        if (decimalVal > MaxValueConstant) return -1;
                        if (decimalVal < MinValueConstant) return 1;
                        return value.CompareTo((SByte)decimalVal);
                }
            }
        }
        catch (OverflowException)
        {
            // If conversion fails due to overflow, we can assume the value is outside our range
            return -1;
        }

        throw new ArgumentException("Object is not a valid type for comparison", nameof(obj));
    }

    /// <summary>
    /// Compares this instance to a specified <see cref="Int5T"/> object and returns an indication of their relative values.
    /// </summary>
    /// <param name="other">An <see cref="Int5T"/> object to compare.</param>
    /// <returns>
    /// A signed number indicating the relative values of this instance and <paramref name="other"/>.
    /// Return Value Description:
    /// Less than zero: This instance is less than <paramref name="other"/>.
    /// Zero: This instance is equal to <paramref name="other"/>.
    /// Greater than zero: This instance is greater than <paramref name="other"/>.
    /// </returns>
    public int CompareTo(Int5T other) => value.CompareTo(other.value);

    #region IConvertible Implementation

    public TypeCode GetTypeCode() => TypeCode.Int32;

    bool IConvertible.ToBoolean(IFormatProvider? provider) => value != 0;
    char IConvertible.ToChar(IFormatProvider? provider) => Convert.ToChar(value);
    sbyte IConvertible.ToSByte(IFormatProvider? provider) => Convert.ToSByte(value);
    byte IConvertible.ToByte(IFormatProvider? provider) => Convert.ToByte(value);
    short IConvertible.ToInt16(IFormatProvider? provider) => Convert.ToInt16(value);
    ushort IConvertible.ToUInt16(IFormatProvider? provider) => Convert.ToUInt16(value);
    int IConvertible.ToInt32(IFormatProvider? provider) => Convert.ToInt32(value);
    uint IConvertible.ToUInt32(IFormatProvider? provider) => Convert.ToUInt32(value);
    long IConvertible.ToInt64(IFormatProvider? provider) => Convert.ToInt64(value);
    ulong IConvertible.ToUInt64(IFormatProvider? provider) => Convert.ToUInt64(value);
    float IConvertible.ToSingle(IFormatProvider? provider) => Convert.ToSingle(value);
    double IConvertible.ToDouble(IFormatProvider? provider) => Convert.ToDouble(value);
    decimal IConvertible.ToDecimal(IFormatProvider? provider) => Convert.ToDecimal(value);
    DateTime IConvertible.ToDateTime(IFormatProvider? provider) => throw new InvalidCastException();
    string IConvertible.ToString(IFormatProvider? provider) => value.ToString(provider);

    object IConvertible.ToType(Type conversionType, IFormatProvider? provider) =>
        Convert.ChangeType(value, conversionType, provider);

    #endregion

    #region IUtf8SpanFormattable Implementation

    bool IUtf8SpanFormattable.TryFormat(Span<byte> utf8Destination, out int bytesWritten, ReadOnlySpan<char> format, IFormatProvider? provider)
    {
        if (!value.TryFormat(stackalloc char[32], out int charsWritten, format, provider))
        {
            bytesWritten = 0;
            return false;
        }

        // Get UTF8 byte count for the character length
        var byteCount = System.Text.Encoding.UTF8.GetMaxByteCount(charsWritten);

        if (utf8Destination.Length < byteCount)
        {
            bytesWritten = 0;
            return false;
        }

        // Convert to string since we can't go directly from ReadOnlySpan<char> to UTF8
        var str = value.ToString(format.ToString(), provider);
        bytesWritten = System.Text.Encoding.UTF8.GetBytes(str, utf8Destination);
        return true;
    }

    #endregion

    #region IIncrementOperators/IDecrementOperators Implementation

    public static Int5T operator ++(Int5T value) => Create(value.value + 1);
    public static Int5T operator --(Int5T value) => Create(value.value - 1);

    #endregion

    static bool IEqualityOperators<Int5T, Int5T, bool>.operator ==(Int5T left, Int5T right) => left.value == right.value;
    static bool IEqualityOperators<Int5T, Int5T, bool>.operator !=(Int5T left, Int5T right) => left.value != right.value;

    #region Binary Operations

    
static Int5T ITritwiseOperators<Int5T, Int5T, Int5T>.operator &(Int5T left, Int5T right) => Create(Operation.And(left.value, right.value));
static Int5T ITritwiseOperators<Int5T, Int5T, Int5T>.operator |(Int5T left, Int5T right) => Create(Operation.Or(left.value, right.value));
static Int5T ITritwiseOperators<Int5T, Int5T, Int5T>.operator ^(Int5T left, Int5T right) => Create(Operation.Xor(left.value, right.value));
static Int5T IShiftOperators<Int5T, int, Int5T>.operator <<(Int5T value, int shiftAmount) => Create(value.value.Shift(-shiftAmount));
static Int5T IShiftOperators<Int5T, int, Int5T>.operator >> (Int5T value, int shiftAmount) => Create(value.value.Shift(shiftAmount));
static Int5T IShiftOperators<Int5T, int, Int5T>.operator >>> (Int5T value, int shiftAmount) => Create(value.value.Shift(shiftAmount));

    #endregion

    #region Interface Static Members

    static Int5T ISignedNumber<Int5T>.NegativeOne => new(-1);
    static Int5T INumberBase<Int5T>.One => new(1);
    static Int5T INumberBase<Int5T>.Zero => new(0);
    static Int5T IAdditiveIdentity<Int5T, Int5T>.AdditiveIdentity => new(0);
    static Int5T IMultiplicativeIdentity<Int5T, Int5T>.MultiplicativeIdentity => new(1);

    static bool INumberBase<Int5T>.IsCanonical(Int5T value) => true;
    static bool INumberBase<Int5T>.IsComplexNumber(Int5T value) => false;
    static bool INumberBase<Int5T>.IsEvenInteger(Int5T value) => value.value % 2 == 0;
    static bool INumberBase<Int5T>.IsFinite(Int5T value) => true;
    static bool INumberBase<Int5T>.IsImaginaryNumber(Int5T value) => false;
    static bool INumberBase<Int5T>.IsInfinity(Int5T value) => false;
    static bool INumberBase<Int5T>.IsInteger(Int5T value) => true;
    static bool INumberBase<Int5T>.IsNaN(Int5T value) => false;
    static bool INumberBase<Int5T>.IsNegative(Int5T value) => value.value < 0;
    static bool INumberBase<Int5T>.IsNegativeInfinity(Int5T value) => false;
    static bool INumberBase<Int5T>.IsNormal(Int5T value) => value.value != 0;
    static bool INumberBase<Int5T>.IsOddInteger(Int5T value) => value.value % 2 != 0;
    static bool INumberBase<Int5T>.IsPositive(Int5T value) => value.value > 0;
    static bool INumberBase<Int5T>.IsPositiveInfinity(Int5T value) => false;
    static bool INumberBase<Int5T>.IsRealNumber(Int5T value) => true;
    static bool INumberBase<Int5T>.IsSubnormal(Int5T value) => false;
    static bool INumberBase<Int5T>.IsZero(Int5T value) => value.value == 0;

    static Int5T INumberBase<Int5T>.MaxMagnitude(Int5T x, Int5T y) =>
        Math.Abs(x.value) > Math.Abs(y.value) ? x : y;

    static Int5T INumberBase<Int5T>.MaxMagnitudeNumber(Int5T x, Int5T y) =>
        Math.Abs(x.value) > Math.Abs(y.value) ? x : y;

    static Int5T INumberBase<Int5T>.MinMagnitude(Int5T x, Int5T y) =>
        Math.Abs(x.value) < Math.Abs(y.value) ? x : y;

    static Int5T INumberBase<Int5T>.MinMagnitudeNumber(Int5T x, Int5T y) =>
        Math.Abs(x.value) < Math.Abs(y.value) ? x : y;

    static int INumberBase<Int5T>.Radix => 2;

    static Int5T INumberBase<Int5T>.Abs(Int5T value) =>
        value.value < 0 ? new((SByte)(-value.value)) : value;

    static Int5T INumberBase<Int5T>.Parse(ReadOnlySpan<char> s, NumberStyles style, IFormatProvider? provider) =>
        Create(SByte.Parse(s, style, provider));

    static Int5T INumberBase<Int5T>.Parse(string s, NumberStyles style, IFormatProvider? provider) =>
        Create(SByte.Parse(s, style, provider));

    static bool INumberBase<Int5T>.TryParse(ReadOnlySpan<char> s, NumberStyles style, IFormatProvider? provider, out Int5T result)
    {
        if (SByte.TryParse(s, style, provider, out var parsed))
        {
            result = Create(parsed);
            return true;
        }

        result = default;
        return false;
    }

    static bool INumberBase<Int5T>.TryParse([NotNullWhen(true)] string? s, NumberStyles style, IFormatProvider? provider, out Int5T result)
    {
        if (SByte.TryParse(s, style, provider, out var parsed))
        {
            result = Create(parsed);
            return true;
        }

        result = default;
        return false;
    }

    #endregion

    #region ISpanFormattable/ISpanParsable Implementation

    static Int5T ISpanParsable<Int5T>.Parse(ReadOnlySpan<char> s, IFormatProvider? provider) =>
        new(SByte.Parse(s, NumberStyles.Integer, provider));

    static bool ISpanParsable<Int5T>.TryParse(ReadOnlySpan<char> s, IFormatProvider? provider, out Int5T result)
    {
        if (SByte.TryParse(s, NumberStyles.Integer, provider, out var value))
        {
            result = new(value);
            return true;
        }

        result = default;
        return false;
    }

    bool ISpanFormattable.TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format, IFormatProvider? provider) =>
        value.TryFormat(destination, out charsWritten, format.ToString(), provider);

    static Int5T IParsable<Int5T>.Parse(string s, IFormatProvider? provider) =>
        new(SByte.Parse(s, NumberStyles.Integer, provider));

    static bool IParsable<Int5T>.TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, out Int5T result)
    {
        if (SByte.TryParse(s, NumberStyles.Integer, provider, out var value))
        {
            result = new(value);
            return true;
        }

        result = default;
        return false;
    }

    #endregion

    #region Generic Conversions

    static bool INumberBase<Int5T>.TryConvertFromChecked<TOther>(TOther value, out Int5T result)
    {
        if (value is IConvertible conv)
        {
            try
            {
                var intValue = conv.ToSByte(null);
                if (intValue >= MinValueConstant && intValue <= MaxValueConstant)
                {
                    result = Create(intValue);
                    return true;
                }
            }
            catch
            {
                // Fall through to default
            }
        }

        result = default;
        return false;
    }

    static bool INumberBase<Int5T>.TryConvertFromSaturating<TOther>(TOther value, out Int5T result)
    {
        if (value is IConvertible conv)
        {
            try
            {
                var intValue = conv.ToSByte(null);
                result = Create(intValue);
                return true;
            }
            catch
            {
                // Fall through to default
            }
        }

        result = default;
        return false;
    }

    static bool INumberBase<Int5T>.TryConvertFromTruncating<TOther>(TOther value, out Int5T result)
    {
        if (value is IConvertible conv)
        {
            try
            {
                var intValue = conv.ToSByte(null);
                result = Create(intValue);
                return true;
            }
            catch
            {
                // Fall through to default
            }
        }

        result = default;
        return false;
    }

    static bool INumberBase<Int5T>.TryConvertToChecked<TOther>(Int5T value, [MaybeNullWhen(false)] out TOther result)
        where TOther : default
    {
        if (typeof(TOther) == typeof(SByte))
        {
            result = (TOther)(object)value.value;
            return true;
        }

        result = default;
        return false;
    }

    static bool INumberBase<Int5T>.TryConvertToSaturating<TOther>(Int5T value, [MaybeNullWhen(false)] out TOther result)
        where TOther : default
    {
        if (typeof(TOther) == typeof(SByte))
        {
            result = (TOther)(object)value.value;
            return true;
        }

        result = default;
        return false;
    }

    static bool INumberBase<Int5T>.TryConvertToTruncating<TOther>(Int5T value, [MaybeNullWhen(false)] out TOther result)
        where TOther : default
    {
        if (typeof(TOther) == typeof(SByte))
        {
            result = (TOther)(object)value.value;
            return true;
        }

        result = default;
        return false;
    }

    #endregion
}